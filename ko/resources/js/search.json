[[{"l":"MoAI Platform 문서","p":["MoAI(Moreh AI appliance for AI accelerators) 은 대규모 딥러닝 모델 개발에 필수적인 그래픽 처리 장치(GPU)를 손쉽게 제어할 수 있는 확장 가능한 AI 플랫폼입니다.","Virtual GPU Clusters- 가상화된 GPU 클러스터에 접근하고 이를 활용하여 컴퓨팅 자원을 원활하게 확장할 수 있습니다.","Fine-Tuning- 몇 가지 명령어만으로 파인튜닝을 수행하고, 파인 튜닝된 모델을 추론에 배포할 수 있습니다.","Advanced Parallelization- 모델 훈련을 최적화하기 위해 고급 병렬 처리 기술을 손쉽게 적용할 수 있습니다."]},{"l":"Getting Started","p":["Fine-tuning 시작하기 MoAI Platform을 처음 사용하는 사용자에게 필요한 정보 안내","AP(Advanced Parallelization) Advanced Parallelization (AP) 기능 사용 안내","Moreh Toolkit command line 사용방법","MoAI Platform Features MoAI Platform의 가상화와 병렬화 기능"]},{"i":"moai-platform이란","l":"MoAI Platform이란?","p":["MoAI Platform은 대규모 딥러닝 모델을 개발하기 위한 확장 가능한 AI 플랫폼으로, 수천 대의 GPU를 쉽게 제어하여 AI 모델을 학습하거나 추론할 수 있습니다."]},{"l":"MoAI Platform 핵심 기술","p":["딥러닝 모델이 진화함에 따라 파라미터가 수십억~ 수백억 단위로 확장되는 등 점점 복잡해지면서 대규모의 컴퓨팅 리소스가 AI 인프라의 필수 요소가 되었습니다. 대규모 모델을 개발할 때 수동 병렬 처리와 GPU 및 노드 관리를 통해 모델 학습을 최적화하는 과정이 필요하며 이로 인해 개발자들의 많은 노력과 시간이 많이 소요됩니다.","또한, 대규모 모델을 학습하고 추론하는 과정에서 GPU 노드 장애, 메모리 한계 및 병목 현상 등의 이슈가 종종 발생하여, 이를 해결하는 것은 매우 까다로운 작업입니다.","MoAI Platform의 GPU 가상화 기능과 자동 병렬화 기능은 이러한 한계와 어려움을 다음 기능으로 해결하여 대규모 AI 시대에 효율적인 인프라를 제공합니다.","다양한 가속기, 다중 GPU 지원","GPU 가상화","동적 GPU 할당","AI Compiler 자동 병렬화","Copyright © 2024 Moreh Corporation"]}],[{"l":"MoAI Platform 개요"},{"i":"moai-platform이란","l":"MoAI Platform이란?","p":["MoAI Platform은 대규모 딥러닝 모델을 개발하기 위한 확장 가능한 AI 플랫폼으로, 수천 대의 GPU를 쉽게 제어하여 AI 모델을 학습하거나 추론할 수 있습니다."]},{"l":"MoAI Platform 핵심 기술","p":["딥러닝 모델이 진화함에 따라 파라미터가 수십억~ 수백억 단위로 확장되는 등 점점 복잡해지면서 대규모의 컴퓨팅 리소스가 AI 인프라의 필수 요소가 되었습니다. 대규모 모델을 개발할 때 수동 병렬 처리와 GPU 및 노드 관리를 통해 모델 학습을 최적화하는 과정이 필요하며 이로 인해 개발자들의 많은 노력과 시간이 많이 소요됩니다.","또한, 대규모 모델을 학습하고 추론하는 과정에서 GPU 노드 장애, 메모리 한계 및 병목 현상 등의 이슈가 종종 발생하여, 이를 해결하는 것은 매우 까다로운 작업입니다.","MoAI Platform의 GPU 가상화 기능과 자동 병렬화 기능은 이러한 한계와 어려움을 다음 기능으로 해결하여 대규모 AI 시대에 효율적인 인프라를 제공합니다.","다양한 가속기, 다중 GPU 지원","GPU 가상화","동적 GPU 할당","AI Compiler 자동 병렬화"]},{"i":"1-다양한-가속기-다중-gpu-지원","l":"1. 다양한 가속기, 다중 GPU 지원","p":["MoAI 플랫폼은 다양한 AI 가속기를 지원하며, GPU의 종류에 관계없이 다양한 모델 학습과 추론 작업을 실행할 수 있습니다. 사용자는 AMD, Intel 및 NVIDIA 외의 다른 AI 가속기와 함께 사용할 수 있으며, 이를 위해 딥러닝 개발 및 모델 학습을 위한 코드를 수정할 필요가 없습니다."]},{"l":"2. GPU 가상화","p":["MoAI 플랫폼의 가상화 기능은 수천 개의 GPU를 하나의 GPU처럼 사용할 수 있게 합니다. 이를 통해 모델링 및 최적화 프로세스를 간소화하여 AI 엔지니어에게 원활하고 효율적인 경험을 제공합니다.","유연한 확장성: 필요에 따라 GPU 자원을 확장하거나 축소할 수 있어 서비스의 확장성을 높일 수 있습니다.","관리 및 배포의 간소화: 여러 GPU를 활용하는 복잡성을 추상화함으로써 딥러닝 작업에서 성능을 향상시키기 위한 리소스의 관리와 배포를 쉽게 할 수 있습니다.","비용 절감: GPU 인프라 관리자는 가상화된 GPU를 효율적으로 활용함으로써 하드웨어의 비용을 절감할 수 있습니다.","MoAI Platform은 실제로 연산중일 때만 GPU 사양에 따라 분 단위로 요금이 부과되는 완전한 종량제 방식으로 설계되어, 이용자의 사용 패턴에 맞추어 기존 클라우드 서비스의 GPU를 특정 가상머신(VM)에 종속시키는 Passthrough 방식 대비 대규모의 비용 절감이 가능합니다.","비교 사례:","Google Cloud: Google Cloud는 머신당 초 단위로 할당으로 요금을 책정합니다. 다만 리소스가 고정되어 가상 머신을 한번 선택하면 교체하기 어렵습니다.","Azure: Azure는 초 단위로 컴퓨팅 용량에 대한 비용을 지불하며, 필요에 따라 소비량을 늘리거나 줄일 수 있습니다. 그러나 인스턴스를 학습에 따라 유연하게 변경할 수는 없습니다.","MoAI Platform: MoAI Platform의 GPU 요금 책정은 AI 가속기 크기와 GPU 연산 시간에 따라 정확한 요금을 적용하여 더 효율적인 비용을 제공합니다."]},{"l":"3. 동적 GPU 할당","p":["MoAI 플랫폼에서는 AI 엔지니어가 필요한 만큼의 GPU 자원으로만 딥러닝 학습 및 추론을 시작할 수 있습니다.","효율적인 GPU 자원 활용: GPU 리소스는 연산 실행 중에만 할당되어 효율적으로 활용할 수 있습니다. 이를 통해 소프트웨어 및 인프라 개발 비용을 절감하고, 개발 및 배포 시간을 단축할 수 있습니다.","간편한 클러스터 셋업: MoAI Platform을 사용하면 동적 할당 기능으로 AI 엔지니어가 GPU 클러스터를 쉽게 설정할 수 있습니다. 일반적으로 딥러닝 개발자가 GPU를 사용하기 위해서는 개발 환경 구축을 위해 PyTorch 또는 Tensorflow를 GPU 클러스터 기기의 백노드와 연결하여 각 프로세스가 다른 프로세스들과 데이터를 통신하도록 설정해야 합니다."]},{"l":"4. AI Compiler 자동 병렬화","p":["딥러닝 모델은 여러 계층(Layer)으로 구성되어 있으며, 각 계층마다 많은 연산을 포함하고 있습니다. 이러한 계층들은 독립적으로 학습될 수 있어 연산들이 병렬로 처리될 수 있습니다. GPU 자동 병렬화는 딥러닝 모델의 학습 및 추론을 자동으로 병렬화하는 기술입니다.","MoAI Platform의 자동 병렬화 기술은 이러한 연산을 최적의 방식으로 자동으로 분산시키고 병렬화하여 하드웨어 리소스를 최대한 활용합니다.","인공지능 시대에는 대형 언어 모델(LLM) 및 대형 멀티모달 모델(LMM)과 같은 대규모 모델의 훈련 및 추론에 상당한 규모의 GPU 클러스터와 효과적인 GPU 병렬화가 필요합니다.","현재 NVIDIA와 함께 사용되는 일반적인 AI 프레임워크는 모델의 크기와 복잡성, 그리고 사용 가능한 GPU의 크기나 클러스터에 따라 AI 엔지니어가 병렬화를 수동으로 조정해야 합니다. 이 과정은 시간이 많이 소요되며 종종 몇 주가 걸립니다.","MoAI 플랫폼은 특정 AI 모델과 GPU 클러스터의 크기를 기반으로 GPU 리소스를 최적으로 활용하는 Moreh AI 컴파일러를 통해 자동 병렬화를 제공합니다.","자동 병렬화를 통해 NVIDIA 환경(플랫폼)에서 몇 주가 소요되는 모델 훈련을 2~ 3일로 대폭 단축할 수 있습니다.","Copyright © 2024 Moreh Corporation"]}],[{"l":"MoAI Features","p":["MoAI Platform은 수백 개의 GPU를 가상화하여 단일 가속기로 처리하며, 병렬화를 통해 복잡한 GPU 클러스터 관리의 부담을 줄여줍니다. 아래 문서는 MoAI Platform 이 제공하는 대표적인 두 가지 기능에 대한 작동 원리 및 개념을 기술합니다.","GPU 가상화","자동 병렬화"]}],[{"l":"GPU 가상화","p":["MoAI Platform의 가상화 기능을 통해 사용자는 수백 개의 GPU를 단일 가속기처럼 사용할 수 있습니다.","이를 통해 수백 대의 GPU에 해당하는 계산 리소스를 활용하면서도 복잡한 GPU 클러스터 관리의 부담을 줄일 수 있습니다.","moreh-smi 명령어를 통해 현재 환경에서 사용 가능한 가상화된 가속기를 확인할 수 있습니다.","예를 들어, ** moreh-smi** 의 출력 결과는 사용자가 마치 2048GB의 메모리를 가진 단일 가속기(MoAI Accelerator)를 사용하는 것처럼 보입니다. MoAI Platform은 수십에서 수백 개의 물리적 GPU로 이루어진 클러스터를 별도의 작업 없이 단일 가속기처럼 사용할 수 있도록 가상화해줍니다.","MoAI Platform에서 PyTorch나 TensorFlow 같은 딥러닝 프레임워크를 사용하는 경우에도 사용자는 단일 가속기를 사용하는 것처럼 작업할 수 있습니다. 사용자는 PyTorch의 cuda() 같은 API를 그대로 사용하여 가상화된 가속기를 활용할 수 있습니다.","예를 들어 위와 같이, PyTorch에서 기존 cuda API를 사용하여 현재 사용 가능한 가속기 수를 확인하면, 1이라는 결과가 나옵니다.","여기서 알아두셔야 할 것은, 실제 유저가 사용하는 노드(front node)에는 물리적인 GPU가 없다는 사실입니다. 사용자가 PyTorch와 같은 딥러닝 프레임워크에서 .cuda() 같은 API를 통해 GPU 가속기를 사용하려고 하면 MoAI Platform은 백노드(backnode)에 있는 GPU 클러스터 자원을 자동으로 할당합니다.","딥러닝 프레임워크를 통해 본격적인 모델 학습 및 추론을 진행할 때, MoAI Platform은 모델 병렬화와 같은 기법을 자동으로 적용하여 사용자가 GPU 클러스터를 하나의 가속기로 간주하여 사용할 수 있도록 합니다.","아래 그림은 사용자가 MoAI Accelerator를 사용할 때 사용 중인 노드와 실제로 할당된 GPU 클러스터 간의 관계를 보여줍니다.","MoAI Accelerator를 구성하는 물리적인 GPU의 사용 현황은 moreh-smi -p 명령어를 통해 확인할 수 있습니다."]}],[{"l":"MoAI Platform 병렬화","p":["MoAI Platform에서 사용자는 가상의 하나의 GPU만 사용하게 됩니다. 따라서 사용자는 하나의 GPU를 사용하는 코드를 작성하게 됩니다. 그렇다면 어떻게 여러 개의 GPU를 사용할 수 있을까요?","사용자가 여러 GPU를 사용하는 flavor를 선택하면, MoAI Platform은 자동으로 데이터 병렬화를 수행합니다. 예를 들어, 사용자가 8개의 device를 포함한 flavor를 선택하면, 전체 배치 크기(batch size)를 8등분하여 각 device에 나눠 처리하고, 이를 통해 학습 속도가 크게 향상됩니다.","예를 들어, 사용자가 llama3-8b 모델을 fine-tuning할 때 4개의 GPU를 사용하는 flavor를 선택하고, batch size를 16로 설정한다면 각 GPU당 4개로 아래와 같은 throughput이 나올 것입니다.","또한, 사용자가 16개의 GPU를 사용하는 flavor를 선택하고 batch size를 64로 설정하면, 각 GPU당 동일하게 4개로 자동으로 병렬처리가 되어 throughput은 4개의 GPU를 사용할 때보다 약 4배가 될 것 입니다.","만약 사용자가 더 큰 메모리를 사용하기 위해 여러 GPU를 사용하려는 경우 는 어떨까요?","MoAI Platform은 모델 병렬화와 최적화를 자동으로 지원합니다.","사용자가 Llama3-8b 모델을 16개의 GPU로, batch size를 512로 설정하여 돌린다면, 모델 병렬화와 데이터 병렬화가 동시에 이루어져 학습이 진행됩니다.","그 외에도 70B와 같은 대형 모델도 자동으로 병렬화되어 간편하게 학습할 수 있습니다. 이처럼 MoAI Platform은 사용자가 사용하는 모델과 배치 크기 등에 따라 자동으로 최적화와 병렬화를 제공하여, 다중 GPU를 편리하고 효율적으로 사용할 수 있도록 합니다."]}],[{"l":"Fine-tuning Tutorials","p":["이 튜토리얼은 Llama2, Mistral 등의 대형 언어 모델 6종을 fine-tuning 하고자 하는 모든 분들을 위한 것입니다. MoAI 플랫폼을 사용하여 아래 대형 언어 모델들을 미세 조정하는 과정을 안내합니다.","Llama2 13B","Llama3 8B","Mistral","GPT","Qwen","Baichuan2","머신러닝에서 미세 조정(fine-tuning)이란 사전 학습된 모델의 매개변수를 새로운 데이터로 조정하여 특정 작업의 성능을 향상시키는 것을 의미합니다. 즉, 기존 모델을 새로운 작업에 적용하고자 할 때, 새로운 데이터셋으로 모델을 최적화하여 특정 요구와 도메인에 맞게 커스터마이징하는 과정입니다.","사전학습된 모델은 범용성을 고려한 매우 큰 파라미터를 가지는 모델이며 큰 모델을 효과적으로 fine-tuning하려면 충분한 양의 학습 데이터가 필요합니다.","MoAI Platform에서는 GPU의 메모리 사이즈를 고려해 최적화된 병렬화 기법을 손쉽게 적용할 수 있어 학습 시작 전에 소요되는 시간과 노력을 획기적으로 줄일 수 있습니다."]},{"i":"이-튜토리얼에서-배우게-될-내용","l":"이 튜토리얼에서 배우게 될 내용:","p":["데이터셋, 모델, 토크나이저 로드하기","학습 실행 및 결과 확인하기","자동 병렬화 기능 적용하기","적절한 학습 환경 및 AI 가속기 선택 방법"]}],[{"l":"Llama2 Fine-tuning","p":["이 튜토리얼은 MoAI Platform에서 오픈 소스 Llama2 13B 을 fine-tuning하는 예시를 소개합니다. 튜토리얼을 통해 MoAI Platform을 통해 AMD GPU 클러스터를 활용하는 방법을 배우고, 성능 및 자동 병렬화의 장점을 확인할 수 있습니다."]},{"l":"개요","p":["Llama2 모델은 2023년 7월에 Meta 가 공개한 Decoder-only Transformer 기반 오픈 소스 모델입니다. 기존 Llama 모델의 구조를 따르지만 40% 더 많은 데이터로 학습시켜 더 다양하고 복잡한 정보를 이해할 수 있습니다.","Llama2는 특히 언어 이해 및 생성 작업에 있어서 뛰어난 성능을 보이며, 다양한 자연어 처리 태스크에서 SOTA 성능을 달성하였습니다. 이 모델은 다국어 지원이 가능하여 전 세계 다양한 언어의 텍스트를 처리할 수 있으며, 공개적으로 접근 가능하여 연구 및 개발 목적으로 널리 사용될 수 있습니다.","이 튜토리얼에서는 MoAI Platform에서 CNN Daily Mail 데이터셋을 활용하여 Llama2 모델을 fine-tuning하는 방법을 살펴보겠습니다. 이 과정에서는 자연어 처리 방법 중 하나인 요약(summarize) 작업을 다룰 것입니다."]},{"l":"시작하기 전에","p":["MoAI Platform 상의 컨테이너 혹은 가상 머신을 인프라 제공자로부터 발급받고, 여기에 SSH로 접속하는 방법을 안내 받으시기 바랍니다. 예를 들어 MoAI Platform 기반으로 운영되는 다음 퍼블릭 클라우드 서비스를 신청하여 사용할 수 있습니다.","KT Cloud의 Hyperscale AI Computing","혹은 일시적으로 체험판 컨테이너 및 GPU 자원을 할당 받기를 원하시는 분은 Moreh( support@moreh.io)에 문의하시기 바랍니다.","SSH로 접속한 다음 moreh-smi 명령을 실행하여 MoAI Accelerator가 잘 표시되는지 확인하시기 바랍니다. 디바이스 이름은 시스템마다 다르게 설정되어 있을 수 있습니다."]},{"l":"MoAI Accelerator 확인","p":["이 튜토리얼에서 안내할 Llama2 모델과 같은 sLLM을 학습하기 위해서는 적절한 크기의 MoAI Accelerator를 선택해야 합니다. 먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","수행할 학습에 필요한 구체적인 MoAI Accelerator 설정에 대한 설명은 3. 학습 실행하기 에서 제공하겠습니다."]}],[{"l":"1. Fine-tuning 준비하기","p":["MoAI Platform에서 PyTorch 스크립트 실행 환경을 준비하는 것은 일반적인 GPU 서버에서와 크게 다르지 않습니다."]},{"l":"PyTorch 설치 여부 확인하기","p":["SSH로 컨테이너에 접속한 다음 아래와 같이 실행하여 현재 conda 환경에 PyTorch가 설치되어 있는지 확인합니다.","버전명에는 PyTorch 버전과 이를 실행시키기 위한 MoAI 버전이 함께 표시되어 있습니다. 위 예시의 경우 PyTorch 1.13.1+cu116 버전을 실행하는 MoAI의 24.2.0 버전이 설치되어 있음을 의미합니다.","만약 conda: command not found 메시지가 표시되거나, torch 패키지가 리스트되지 않거나, 혹은 torch 패키지가 존재하더라도 버전명에 “moreh”가 포함되지 않은 경우 Prepare Fine-tuning on MoAI Platform 문서에 따라 conda 환경을 생성하십시오.","만약 해당 MoAI 버전이 24.2.0이 아닌 다른 버전이라면 아래의 코드를 실행시키십시오."]},{"l":"PyTorch 동작 여부 확인하기","p":["다음과 같이 실행하여 torch 패키지가 정상적으로 import 되고 MoAI Accelerator가 인식되는지 확인합니다."]},{"l":"필요 Python 패키지 설치","p":["다음과 같이 실행하여 스크립트 실행에 필요한 서드 파티 Python 패키지들을 미리 설치합니다."]},{"l":"학습 스크립트 다운로드","p":["다음과 같이 실행하여 GitHub 레포지토리에서 학습을 위한 PyTorch 스크립트를 다운로드합니다. 본 튜토리얼에서는 tutorial 디렉토리 안에 있는 train_llama2.py 스크립트를 사용할 것입니다."]},{"i":"필요-python-패키지-설치-1","l":"필요 Python 패키지 설치","p":["다음과 같이 실행하여 스크립트 실행에 필요한 서드 파티 Python 패키지들을 미리 설치합니다."]},{"l":"학습 모델 및 토크나이저 다운로드","p":["Hugging Face를 이용해 Llama2-13b-hf 모델의 체크포인트와 토크나이저를 다운로드합니다. 이때 Llama2 모델은 커뮤니티 라이센스 동의와 Hugging Face 토큰 정보가 필요합니다. 또한 Llama2 13B 모델의 경우 체크포인트 용량이 약 49GB이기 때문에 체크포인트를 위한 50GB 스토리지 여유가 필수적입니다.","먼저 다음 사이트에서 필요한 정보를 입력한 후 라이센스 동의를 진행합니다.","meta-llama/Llama-2-13b-hf · Hugging Face","동의서 제출 후 페이지의 상태가 다음과 같이 변경된 것을 확인합니다.","상태 변경이 되었다면, 다음과 같이 tutorial 디렉토리 안의 download_llama2_13b.py 스크립트를 이용해 모델 체크포인트와 토크나이저를 ./llama-2-13b-hf 디렉토리에 다운로드 받을 수 있습니다.","user-token 은 사용자의 Hugging Face 토큰으로 치환합니다.","모델 체크포인트와 토크나이저가 다운로드 받아졌는지 확인합니다."]},{"l":"학습 데이터 다운로드","p":["학습 데이터를 다운로드 받기 위해 dataset 디렉토리 안에 있는 prepare_llama2_dataset.py 스크립트를 사용하겠습니다. 코드를 실행하면 cnn_dailymail 데이터를 다운로드 받고 학습에 사용할 수 있도록 전처리를 진행하여 llama2_dataset.pt 파일로 저장합니다.","저장된 데이터셋은 코드상에서 다음과 같이 로드하여 사용할 수 있습니다."]}],[{"l":"2. Moreh의 학습 코드 톺아보기","p":["학습 데이터를 모두 준비하셨다면 다음으로는 실제 fine-tuning 과정을 실행할 train_llama2.py 스크립트의 내용에 대해 살펴보겠습니다. 이 스크립트는 통상적인 PyTorch 코드로서 Hugging Face Transformers 라이브러리에 있는 Llama2 13B 모델 구현을 기반으로 fine-tuning 작업을 실행합니다.","우선 제공된 스크립트를 그대로 사용하여 튜토리얼을 끝까지 진행해 보시기를 권장합니다. 이후 스크립트를 원하는 대로 수정하셔서 Llama2 13B 모델을 다른 방식으로 fine-tuning 하는 것도 얼마든지 가능합니다. MoAI Platform은 PyTorch와의 완전한 호환성을 제공하기 때문입니다. 필요하시다면 Moreh에서 제공하는 MoAI Platform 응용 가이드( LLM Fine-tuning 파라미터 가이드)를 참고하십시오."]},{"l":"Training Code","p":["모든 코드는 일반적인 pytorch 사용 경험과 완벽하게 동일합니다.","먼저, transformers 라이브러리에서 필요한 모듈을 불러옵니다.","앞서 다운로드 받았던 모델 체크포인트와 토크나이저를 불러옵니다.","1. Fine tuning 준비하기 단계에서 저장한 전처리된 데이터셋을 불러와 데이터로더를 정의합니다.","이후 학습도 일반적인 Pytorch를 사용하여 모델 학습과 동일하게 진행됩니다.","위와 같이 MoAI Platform에서는 기존에 사용하시던 PyTorch 스크립트를 수정 없이 동일하게 사용하실 수 있습니다."]},{"l":"About Advanced Parallelism","p":["본 튜토리얼에 사용되는 학습 스크립트에는 아래와 같은 코드가 추가로 한 줄 존재합니다. 이는 MoAI Platform에서 제공하는 자동 병렬화 기능을 수행하는 코드입니다.","Llama2 13B와 같은 거대 언어 모델은 학습에 많은 양의 GPU가 필요합니다. 따라서 MoAI Platform이 아닌 다른 프레임워크를 사용할 경우, Data Parallelism, Pipeline Parallelism, Tensor Parallelism과 같은 병렬화 기법을 도입하여 학습을 수행해야 합니다.","예를 들어, 사용자가 일반적인 pytorch 코드에서 DDP를 적용하고 싶다면, 다음과 같은 코드 스니펫이 추가되어야 합니다.","https://pytorch.org/tutorials/intermediate/ddp_tutorial.html","이와 같은 기본적인 설정 외에도 사용자는 학습 스크립트 작성 과정에서 Python 코드가 다중 처리(multi processing) 환경에서 어떻게 동작하는지 이해해야 하며, 특히 다중 노드(multi node) 설정에서는 학습에 사용되는 각 노드의 환경을 구성해야 합니다. 또한, 모델 종류, 크기, 데이터셋 등을 고려하여 최적의 병렬화 방법을 찾기 위해서는 상당한 시간이 필요합니다.","반면, MoAI Platform의 AP 기능을 통해 사용자는 별도의 병렬화 기법을 적용할 필요 없이, 학습 스크립트에 단 한 줄의 코드를 추가하는 것으로도 최적화된 병렬화 학습을 진행할 수 있습니다.","이렇게 MoAI Platform의 Advanced Parallelization(AP)은 다른 프레임워크에서는 경험하기 어려운 최적화 및 자동화 기능을 제공합니다. AP 기능를 통해 최적의 분산 병렬처리 를 경험해 보시기 바랍니다. AP기능을 이용하면 대규모 모델 훈련 시 필요한 Pipeline Parallelism, Tensor Parallelism의 최적 매개변수와 환경 변수 조합을 아주 간단한 코드 한 줄 로 설정할 수 있습니다."]}],[{"l":"3. 학습 실행하기","p":["이제 실제로 fine tuning을 실행해 보겠습니다."]},{"l":"가속기 Flavor 설정","p":["AMD MI210 GPU 32개 사용","AMD MI250 GPU 16개 사용","AMD MI300X GPU 8개 사용","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보 문서를 참고하십시오.","LLM Fine-tuning 파라미터 가이드","MoAI Platform에서는 사용자에게 물리 GPU가 노출되지 않습니다. 대신에, PyTorch에서 사용할 수 있는 가상의 MoAI Accelerator를 MoAI Accelerator가 제공됩니다. 가속기의 Flavor를 설정함으로써 실제 물리 GPU를 얼마나 활용할지를 결정할 수 있습니다. 선택한 가속기 Flavor에 따라 총 학습 시간과 GPU 사용 비용이 달라지므로 사용자는 학습 상황을 고려하여 결정해야 합니다. 사용자의 학습 목표에 맞는 가속기 Flavor를 선택하기 위해 다음 문서를 참고하세요.","moreh-switch-model 툴을 사용하여 현재 시스템에서 사용 가능한 가속기 flavor 리스트를 확인할 수 있습니다. 원활한 모델 학습을 위해 moreh-switch-model 명령어를 이용해 더 큰 메모리의 MoAI Accelerator로 변경할 수 있습니다.","Moreh의 체험판 컨테이너 사용 시: 선택","q 를 입력해 변경을 완료합니다.","따라서 처음 설정되어 있던 flavor를 로 전환한 다음 moreh-smi 명령을 사용하여 정상적으로 반영되었는지 확인하겠습니다.","로 잘 변경된 것을 확인할 수 있습니다.","먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","변경 사항이 잘 반영되었는지 확인하기 위해 다시 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","사용을 위해 8을 입력합니다.","앞서 Llama2 Fine-tuning 문서에서 MoAI Accelerator를 확인했던 것을 기억하시나요? 이제 본격적인 학습 실행을 위해 필요한 가속기를 설정해보겠습니다.","여기서 번호를 입력하여 다른 flavor로 전환할 수 있습니다.","이번 튜토리얼에서는 2048GB 크기의 MoAI Accelerator를 이용하겠습니다.","튜토리얼을 계속 진행하기 위해 인프라 제공자에게 각 flavor에 대응되는 GPU 종류 및 개수를 문의하십시오. 다음 중 하나에 해당하는 Flavor를 선택하여 계속 진행할 수 있습니다.","현재 사용중인 MoAI Accelerator의 메모리 크기는 512GB입니다."]},{"l":"학습 실행","p":["주어진 train_llama2.py 스크립트를 실행합니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력될 것입니다. 이 로그를 통해 Advanced Parallelism 기능이 올바르게 동작하며 최적의 병렬화 설정이 적용되었음을 확인할 수 있습니다. 이전에 살펴본 PyTorch 스크립트 상에서는 AP 코드 한 줄을 제외한 부분에서 GPU 여러 개를 동시에 사용하기 위한 처리가 전혀 없었음을 참고하십시오.","훈련 로그를 확인해 보면 학습이 정상적으로 이루어지는 것을 확인할 수 있습니다.","학습 도중에 출력되는 throughput은 해당 PyTorch 스크립트를 통해 초당 몇 개의 token을 학습하고 있는지를 의미합니다.","AMD MI250 GPU 16개 사용 시: 약 35,000 tokens/sec","GPU 종류 및 개수에 따른 대략적인 학습 소요 시간은 다음과 같습니다.","AMD MI250 GPU 16개 사용 시: 약 10시간"]},{"l":"학습 중에 가속기 상태 확인","p":["학습 도중에 터미널을 하나 더 띄워서 컨테이너에 접속한 후 moreh-smi 명령을 실행하시면 다음과 같이 MoAI Accelerator의 메모리를 점유하며 학습 스크립트가 실행되는 것을 확인하실 수 있습니다. 실행 로그상에서 초기화 과정이 끝나고 Loss가 출력되는 도중에 확인해 보시기 바랍니다."]}],[{"l":"4. 학습 결과 확인하기","p":["앞 장과 같이 train_llama2.py 스크립트를 실행하면 결과 모델이 llama2_summarization 디렉토리에 저장됩니다. 이는 순수한 PyTorch 모델 파라미터 파일로 MoAI Platform이 아닌 일반 GPU 서버에서도 완벽하게 호환됩니다.","미리 다운로드한 GitHub 레포지토리의 tutorial 디렉토리 아래에 있는 inference_llama2.py 스크립트로 학습된 모델을 테스트해 볼 수 있습니다.","테스트에는 영국 프리미어 리그(EPL) 경기 결과와 관련된 기사 내용이 사용되었습니다.","코드를 실행합니다.","출력값을 확인해보면 Llama2가 프롬프트의 내용을 적절하게 요약한 것을 확인할 수 있습니다."]}],[{"l":"5. GPU 개수 변경하기","p":["앞과 동일한 fine-tuning 작업을 GPU 개수를 바꾸어 다시 실행해 보겠습니다. MoAI Platform은 GPU 자원을 단일 가속기로 추상화하여 제공하며 자동으로 병렬 처리를 수행합니다. 따라서 GPU 개수를 변경하더라도 PyTorch 스크립트를 수정할 필요가 전혀 없습니다."]},{"l":"가속기 Flavor 변경","p":["moreh-switch-model 툴을 사용하여 가속기 flavor를 전환합니다. 가속기 변경 방법은 3. 학습 실행하기 문서를 한번 더 참고해주시기 바랍니다.","인프라 제공자에게 문의하여 다음 중 하나를 선택한 다음 계속 진행하십시오. ( KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보)","AMD MI250 GPU 32개 사용","Moreh의 체험판 컨테이너 사용 시: 선택","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","AMD MI210 GPU 64개 사용","AMD MI300X GPU 16개 사용"]},{"l":"학습 실행","p":["다시 train_llama2.py 스크립트를 실행합니다.","사용 가능한 GPU 메모리가 2배 늘었기 때문에, 배치 사이즈 또한 기존 256 에서 512 로 변경하여 실행시켜 보겠습니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력될 것입니다.","앞서 GPU 개수가 절반이었을 때 실행한 결과와 비교해 동일하게 학습이 이루어지며 throughput이 향상되었음을 확인할 수 있습니다.","AMD MI250 GPU 16 → 32개 사용 시: 약 35,000 tokens/sec → 74,000 tokens/sec"]}],[{"l":"6. 마무리","p":["지금까지 MoAI 플랫폼에서 Llama2 13B 로 텍스트 요약 작업을 할 때 fine-tuning 하는 과정을 살펴보았습니다. Llama와 같은 오픈 소스 대형 언어 모델(LLM)은 요약, 질문 답변 등 다양한 자연어 처리 작업에 활용될 수 있습니다. MoAI 플랫폼을 사용한다면 여러분이 필요한 GPU 수를 코드 변경 없이 손쉽게 설정할 수 있습니다. LLaMA 2와 같은 대형 언어 모델, 미세 조정 기술, MoAI 플랫폼의 가용성 덕분에 누구나 강력한 AI 애플리케이션을 개발할 수 있게 되었습니다. 따라서 이 튜토리얼에서 수행해 본 과정을 바탕으로 여러분만의 데이터로 새로운 모델을 빠르고 쉽게 개발해 보세요.","이 튜토리얼에 대해 여전히 궁금한 점이 있다면 Moreh에게 언제든지 문의하세요."]},{"l":"더 알아보기","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Mistral Fine-tuning","GPT Fine-tuning","Baichuan2 Fine-tuning","Qwen Fine-tuning"]}],[{"l":"Llama3 Fine-tuning","p":["이 튜토리얼은 MoAI Platform에서 오픈 소스 Llama3-8b 모델을 fine-tuning하는 예시를 소개합니다. 튜토리얼을 통해 MoAI Platform으로 AMD GPU 클러스터를 사용하는 방법을 익히고 성능 및 자동 병렬화의 이점을 확인할 수 있습니다."]},{"l":"개요","p":["Llama3 모델은 2024년 4월에 Meta 가 공개한 Decoder-only Transformer 기반 오픈 소스 모델입니다. 기존 Llama 모델의 구조를 따르지만 7배 더 많은 데이터(15T)로 학습시켜 더 다양하고 복잡한 정보를 이해할 수 있습니다.","Llama3는 특히 언어 이해 및 생성 작업에 있어서 뛰어난 성능을 보이며, 다양한 자연어 처리 태스크에서 기존 SOTA 성능을 훨씬 뛰어넘는 성능을 달성하였습니다. 이 모델은 다국어 지원이 가능하여 전 세계 다양한 언어의 텍스트를 처리할 수 있으며, 공개적으로 접근 가능하여 연구 및 개발 목적으로 널리 사용될 수 있습니다","이 튜토리얼에서는 MoAI Platform에서 요약(summarize) 태스크에 대해 CNN Daily Mail 데이터셋을 활용해 Llama3 모델을 fine-tuning 해보겠습니다."]},{"l":"시작하기 전에","p":["MoAI Platform 상의 컨테이너 혹은 가상 머신을 인프라 제공자로부터 발급받고, 여기에 SSH로 접속하는 방법을 안내 받으시기 바랍니다. 예를 들어 MoAI Platform 기반으로 운영되는 다음 퍼블릭 클라우드 서비스를 신청하여 사용할 수 있습니다.","KT Cloud의 Hyperscale AI Computing ( https://cloud.kt.com/solution/hyperscaleAiComputing/)","혹은 일시적으로 체험판 컨테이너 및 GPU 자원을 할당 받기를 원하시는 분은 Moreh( support@moreh.io)에 문의하시기 바랍니다.","SSH로 접속한 다음 moreh-smi 명령을 실행하여 MoAI Accelerator가 잘 표시되는지 확인하시기 바랍니다. 디바이스 이름은 시스템마다 다르게 설정되어 있을 수 있습니다."]},{"l":"MoAI Accelerator 확인","p":["이 튜토리얼에서 안내할 Llama2 모델과 같은 sLLM을 학습하기 위해서는 적절한 크기의 MoAI Accelerator를 선택해야 합니다. 먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","수행할 학습에 필요한 구체적인 MoAI Accelerator 설정에 대한 설명은 3. 학습 실행하기 에서 제공하겠습니다."]}],[{"l":"1. Fine-tuning 준비하기","p":["MoAI Platform에서 PyTorch 스크립트 실행 환경을 준비하는 것은 일반적인 GPU 서버에서와 크게 다르지 않습니다."]},{"l":"PyTorch 설치 여부 확인하기","p":["SSH로 컨테이너에 접속한 다음 아래와 같이 실행하여 현재 conda 환경에 PyTorch가 설치되어 있는지 확인합니다.","버전명에는 PyTorch 버전과 이를 실행시키기 위한 MoAI 버전이 함께 표시되어 있습니다. 위 예시의 경우 PyTorch 1.13.1+cu116 버전을 실행하는 MoAI의 24.2.0 버전이 설치되어 있음을 의미합니다.","만약 conda: command not found 메시지가 표시되거나, torch 패키지가 리스트되지 않거나, 혹은 torch 패키지가 존재하더라도 버전명에 “moreh”가 포함되지 않은 경우 Prepare Fine-tuning on MoAI Platform 문서에 따라 conda 환경을 생성하십시오."]},{"l":"PyTorch 동작 여부 확인하기","p":["다음과 같이 실행하여 torch 패키지가 정상적으로 import되고 MoAI Accelerator가 인식되는지 확인합니다."]},{"l":"학습 스크립트 다운로드","p":["다음과 같이 실행하여 GitHub 레포지토리에서 학습을 위한 PyTorch 스크립트를 다운로드합니다. 본 튜토리얼에서는 tutorial 디렉토리 안에 있는 train_llama3.py 스크립트를 사용할 것입니다."]},{"l":"필요 Python 패키지 설치","p":["다음과 같이 실행하여 스크립트 실행에 필요한 서드 파티 Python 패키지들을 미리 설치합니다."]},{"l":"학습 모델 및 토크나이저 다운로드","p":["Hugging Face를 이용해 Llama3-8b 모델의 체크포인트와 토크나이저를 다운로드 받습니다. 이때 Llama3 모델은 커뮤니티 라이센스 동의와 Hugging Face 토큰 정보가 필요합니다. 또한 Llama3 8B 모델의 경우 체크포인트 용량이 약 31GB이기 때문에 체크포인트를 위한 35GB 스토리지 여유가 권장됩니다.","먼저 다음 사이트에서 필요한 정보를 입력한 후 라이센스 동의를 진행합니다.","meta-llama/Meta-Llama-3-8B · Hugging Face","동의서 제출 후 페이지의 상태가 다음과 같이 변경된 것을 확인합니다.","상태 변경이 되었다면, 다음과 같이 tutorial 디렉토리 안의 download_llama3_8b.py 스크립트를 이용해 모델 체크포인트와 토크나이저를 ./llama3-8b 디렉토리에 다운로드 받을 수 있습니다.","user-token 은 사용자의 Hugging Face 토큰으로 치환합니다.","모델 체크포인트와 토크나이저가 다운로드 받아졌는지 확인합니다."]},{"l":"학습 데이터 다운로드","p":["학습 데이터를 다운로드 받기 위해 dataset 디렉토리 안에 있는 prepare_llama3_dataset.py 스크립트를 사용하겠습니다. 코드를 실행하면 cnn_dailymail 데이터를 다운로드 받고 학습에 사용할 수 있도록 전처리를 진행하여 llama3_dataset.pt 파일로 저장합니다.","저장된 데이터셋은 코드상에서 다음과 같이 로드하여 사용할 수 있습니다."]}],[{"l":"2. Moreh의 학습 코드 톺아보기","p":["학습 데이터를 모두 준비하셨다면 다음으로는 실제 fine-tuning 과정을 실행할 train_llama3.py 스크립트의 내용에 대해 살펴 보겠습니다. 이 스크립트는 통상적인 PyTorch 코드로서 Hugging Face Transformers 라이브러리에 있는 Llama3 8B 모델 구현을 기반으로 fine tuning 작업을 실행합니다.","우선 제공된 스크립트를 그대로 사용하여 튜토리얼을 끝까지 진행해 보시기를 권장합니다. 이후 스크립트를 원하는 대로 수정하셔서 Llama2 13B 모델을 다른 방식으로 fine-tuning 하는 것도 얼마든지 가능합니다. MoAI Platform은 PyTorch와의 완전한 호환성을 제공하기 때문입니다. 필요하시다면 Moreh에서 제공하는 MoAI Platform 응용 가이드( LLM Fine-tuning 파라미터 가이드)를 참고하십시오."]},{"l":"Training Code","p":["모든 코드는 일반적인 pytorch 사용 경험과 완벽하게 동일합니다.","먼저, transformers 라이브러리에서 필요한 모듈을 불러옵니다.","앞서 다운로드 받았던 모델 체크포인트와 토크나이저를 불러옵니다.","1. Fine tuning 준비하기 단계에서 저장한 전처리된 데이터셋을 불러와 데이터로더를 정의합니다.","이후 학습도 일반적인 Pytorch를 사용하여 모델 학습과 동일하게 진행됩니다.","위와 같이 MoAI Platform에서는 기존 PyTorch 코드와 동일한 방식으로 작성하실 수 있습니다."]},{"l":"About Advanced Parallelism","p":["본 튜토리얼에 사용되는 학습 스크립트에서는 아래와 같은 코드가 추가로 한 줄 존재합니다. 이는 MoAI Platform에서 제공하는 최고의 병렬화 기능을 수행하는 코드입니다.","본 튜토리얼에서 사용하는 Llama3 8B와 같은 거대한 언어 모델의 경우 필연적으로 여러 개의 GPU를 사용하여 학습시켜야만 합니다. 이 경우 MoAI Platform이 아닌 다른 프레임워크를 사용할 경우, Data Parallel, Pipeline Parallel, Tensor Parallel과 같은 병렬화 기법을 도입하여 학습을 수행해야 합니다.","예를 들어, 사용자가 일반적인 pytorch 코드에서 DDP를 적용하고 싶다면, 다음과 같은 코드 스니펫이 추가되어야 합니다.","https://pytorch.org/tutorials/intermediate/ddp_tutorial.html","이와 같은 기본적인 설정 외에도 사용자는 학습 스크립트 작성 과정에서 Python 코드가 다중 처리(multi processing) 환경에서 어떻게 동작하는지 이해해야 하며, 특히 다중 노드(multi node) 설정에서는 학습에 사용되는 각 노드의 환경을 구성해야 합니다. 또한, 모델 종류, 크기, 데이터셋 등을 고려하여 최적의 병렬화 방법을 찾기 위해서는 상당한 시간이 필요합니다.","반면, MoAI Platform의 AP 기능을 통해 사용자는 별도의 병렬화 기법을 적용할 필요 없이, 학습 스크립트에 단 한 줄의 코드를 추가하는 것으로도 최적화된 병렬화 학습을 진행할 수 있습니다.","이렇게 MoAI Platform의 Advanced Parallelization(AP)은 다른 프레임워크에서는 경험하기 어려운 최적화 및 자동화 기능을 제공합니다. AP 기능를 통해 최적의 분산 병렬처리 를 경험해 보시기 바랍니다. AP기능을 이용하면 대규모 모델 훈련 시 필요한 Pipeline Parallelism, Tensor Parallelism의 최적 매개변수와 환경 변수 조합을 아주 간단한 코드 한 줄 로 설정할 수 있습니다."]}],[{"l":"3. 학습 실행하기","p":["이제 실제로 fine tuning을 실행해 보겠습니다."]},{"l":"가속기 Flavor 설정","p":["AMD MI210 GPU 32개 사용","AMD MI250 GPU 16개 사용","AMD MI300X GPU 8개 사용","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보 문서를 참고하십시오.","LLM Fine-tuning 파라미터 가이드","MoAI Platform에서는 사용자에게 물리 GPU가 노출되지 않습니다. 대신에, PyTorch에서 사용할 수 있는 가상의 MoAI Accelerator를 MoAI Accelerator가 제공됩니다. 가속기의 Flavor를 설정함으로써 실제 물리 GPU를 얼마나 활용할지를 결정할 수 있습니다. 선택한 가속기 Flavor에 따라 총 학습 시간과 GPU 사용 비용이 달라지므로 사용자는 학습 상황을 고려하여 결정해야 합니다. 사용자의 학습 목표에 맞는 가속기 Flavor를 선택하기 위해 다음 문서를 참고하세요.","moreh-switch-model 툴을 사용하여 현재 시스템에서 사용 가능한 가속기 flavor 리스트를 확인할 수 있습니다. 원활한 모델 학습을 위해 moreh-switch-model 명령어를 이용해 더 큰 메모리의 MoAI Accelerator로 변경할 수 있습니다.","Moreh의 체험판 컨테이너 사용 시: 선택","q 를 입력해 변경을 완료합니다.","따라서 처음 설정되어 있던 flavor를 로 전환한 다음 moreh-smi 명령을 사용하여 정상적으로 반영되었는지 확인하겠습니다.","로 잘 변경된 것을 확인할 수 있습니다.","먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","변경 사항이 잘 반영되었는지 확인하기 위해 다시 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","사용을 위해 8을 입력합니다.","앞서 Llama3 Fine-tuning 문서에서 MoAI Accelerator를 확인했던 것을 기억하시나요? 이제 본격적인 학습 실행을 위해 필요한 가속기를 설정해보겠습니다.","여기서 번호를 입력하여 다른 flavor로 전환할 수 있습니다.","이번 튜토리얼에서는 2048GB 크기의 MoAI Accelerator를 이용하겠습니다.","튜토리얼을 계속 진행하기 위해 인프라 제공자에게 각 flavor에 대응되는 GPU 종류 및 개수를 문의하십시오. 다음 중 하나에 해당하는 Flavor를 선택하여 계속 진행할 수 있습니다.","현재 사용중인 MoAI Accelerator의 메모리 크기는 512GB입니다."]},{"l":"학습 실행","p":["주어진 train_llama2.py 스크립트를 실행합니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력될 것입니다. 이 로그를 통해 Advanced Parallelism 기능이 올바르게 동작하며 최적의 병렬화 설정이 적용되었음을 확인할 수 있습니다. 이전에 살펴본 PyTorch 스크립트 상에서는 AP 코드 한 줄을 제외한 부분에서 GPU 여러 개를 동시에 사용하기 위한 처리가 전혀 없었음을 참고하십시오.","훈련 로그를 확인해보면 학습이 정상적으로 이루어지는 것을 확인할 수 있습니다.","학습 도중에 출력되는 throughput은 해당 PyTorch 스크립트를 통해 초당 몇 개의 token을 학습하고 있는지를 의미합니다.","AMD MI250 GPU 16개 사용 시: 약 200,000 tokens/sec","GPU 종류 및 개수에 따른 대략적인 학습 소요 시간은 다음과 같습니다.","AMD MI250 GPU 16개 사용 시: 약 90분"]},{"l":"학습 중에 가속기 상태 확인","p":["학습 도중에 터미널을 하나 더 띄워서 컨테이너에 접속한 후 moreh-smi 명령을 실행하시면 다음과 같이 MoAI Accelerator의 메모리를 점유하며 학습 스크립트가 실행되는 것을 확인하실 수 있습니다. 실행 로그상에서 초기화 과정이 끝나고 Loss가 출력되는 도중에 확인해 보시기 바랍니다."]}],[{"l":"4. 학습 결과 확인하기","p":["앞 장과 같이 train_llama3.py 스크립트를 실행하면 결과 모델이 llama3_summarization 디렉토리에 저장됩니다. 이는 순수한 PyTorch 모델 파라미터 파일로 MoAI Platform이 아닌 일반 GPU 서버에서도 100% 호환됩니다.","미리 다운로드한 GitHub 레포지토리의 tutorial 디렉토리 아래에 있는 inference_llama3.py 스크립트로 학습된 모델을 테스트해 볼 수 있습니다.","코드를 실행합니다.","출력값을 확인해보면 모델이 입력된 프롬프트의 내용을 적절히 요약한 것을 확인할 수 있습니다."]}],[{"l":"5. GPU 개수 변경하기","p":["앞과 동일한 fine-tuning 작업을 GPU 개수를 바꾸어 다시 실행해 보겠습니다. MoAI Platform은 GPU 자원을 단일 가속기로 추상화하여 제공하며 자동으로 병렬 처리를 수행합니다. 따라서 GPU 개수를 변경하더라도 PyTorch 스크립트를 수정할 필요가 전혀 없습니다."]},{"l":"가속기 Flavor 변경","p":["moreh-switch-model 툴을 사용하여 가속기 flavor를 전환합니다. 가속기 변경 방법은 3. 학습 실행하기 문서를 한번 더 참고해주시기 바랍니다.","인프라 제공자에게 문의하여 다음 중 하나를 선택한 다음 계속 진행하십시오. ( KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보)","AMD MI250 GPU 32개 사용","Moreh의 체험판 컨테이너 사용 시: 선택","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","AMD MI210 GPU 64개 사용","AMD MI300X GPU 16개 사용"]},{"l":"학습 실행","p":["다시 train_llama3.py 스크립트를 실행합니다.","사용 가능한 GPU 메모리가 2배 늘었기 때문에, 배치 사이즈 또한 기존 256 에서 512 로 변경하여 실행시켜 보겠습니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력될 것입니다.","앞서 GPU 개수가 절반이었을 때 실행한 결과와 비교해 동일하게 학습이 이루어지며 throughput이 향상되었음을 확인할 수 있습니다.","AMD MI250 GPU 16 → 32개 사용 시: 약 200,000 tokens/sec → 390,000 tokens/sec"]}],[{"l":"6. 마무리","p":["지금까지 MoAI Platform에서 Llama3 8B 를 fine-tuning하는 과정을 살펴 보았습니다. Llama 와 같은 오픈 소스 LLM은 요약, 질의 응답 등 다양한 태스크에 활용할 수 있습니다. MoAI 플랫폼을 사용한다면 여러분이 필요한 GPU 수를 코드 변경 없이 손쉽게 설정할 수 있습니다. 여러분만의 데이터로 새로운 모델을 빠르고 쉽게 개발해 보세요.","LLaMA 3와 같은 대형 언어 모델, 미세 조정 기술, MoAI 플랫폼의 가용성 덕분에 누구나 강력한 AI 애플리케이션을 개발할 수 있게 되었습니다. 따라서 이 튜토리얼에서 수행해 본 과정을 바탕으로 여러분만의 데이터로 새로운 모델을 빠르고 쉽게 개발해 보세요.","이 튜토리얼에 대해 여전히 궁금한 점이 있다면 Moreh( support@moreh.io)에 언제든지 문의하세요."]},{"l":"더 알아보기","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Mistral Fine-tuning","GPT Fine-tuning","Baichuan2 Fine-tuning","Qwen Fine-tuning"]}],[{"l":"Mistral Fine-tuning","p":["이 튜토리얼은 MoAI Platform에서 오픈 소스 Mistral 7B 모델을 fine-tuning하는 예시를 소개합니다. 튜토리얼을 통해 MoAI Platform으로 AMD GPU 클러스터를 사용하는 방법을 익히고 성능 및 자동 병렬화의 이점을 확인할 수 있습니다."]},{"l":"개요","p":["Mistral 모델은 2023년 Mistral AI 사에서 공개한 거대 언어 모델입니다. 코드 생성, 질의 응답, 수학 문제 풀기와 같은 복잡한 태스크에서 더 큰 크기의 모델보다 더 좋은 성능을 기록해 주목 받기도 했습니다.","Mistral 7B 모델은 Transformer의 decoder만을 사용한 Decoder-only 모델입니다. Sliding Window Attention 기법을 적용해 한 번에 처리할 수 있는 입력 토큰의 길이를 크게 늘렸고, Rolling Buffer Cache를 도입해 메모리 사용량을 효율적으로 최적화했습니다.","이 튜토리얼에서는 MoAI Platform에서 코드 생성 태스크에 대해 python_code_instructions_18k-alpaca 데이터셋을 활용하여 Mistral 7B 모델을 fine-tuning 해보겠습니다."]},{"l":"시작하기 전에","p":["MoAI Platform 상의 컨테이너 혹은 가상 머신을 인프라 제공자로부터 발급 받고, 여기에 SSH로 접속하는 방법을 안내 받으시기 바랍니다. 예를 들어 MoAI Platform 기반으로 운영되는 다음 퍼블릭 클라우드 서비스를 신청하여 사용할 수 있습니다.","KT Cloud의 Hyperscale AI Computing ( https://cloud.kt.com/solution/hyperscaleAiComputing/)","혹은 일시적으로 체험판 컨테이너 및 GPU 자원을 할당 받기를 원하시는 분은 Moreh( support@moreh.io)에 문의하시기 바랍니다.","SSH로 접속한 다음 moreh-smi 명령을 실행하여 MoAI Accelerator가 잘 표시되는지 확인하시기 바랍니다. 디바이스 이름은 시스템마다 다르게 설정되어 있을 수 있습니다."]},{"l":"MoAI Accelerator 확인","p":["이 튜토리얼에서 안내할 Mistral 7B 모델과 같은 sLLM을 학습하기 위해서는 적절한 크기의 MoAI Accelerator를 선택해야 합니다. 먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","수행할 학습에 필요한 구체적인 MoAI Accelerator 설정에 대한 설명은 3. 학습 실행하기 에서 제공하겠습니다."]}],[{"l":"1. Fine-tuning 준비하기","p":["MoAI Platform에서 PyTorch 스크립트 실행 환경을 준비하는 것은 일반적인 GPU 서버에서와 크게 다르지 않습니다."]},{"l":"PyTorch 설치 여부 확인하기","p":["SSH로 컨테이너에 접속한 다음 아래와 같이 실행하여 현재 conda 환경에 PyTorch가 설치되어 있는지 확인합니다.","버전명에는 PyTorch 버전과 이를 실행시키기 위한 MoAI 버전이 함께 표시되어 있습니다. 위 예시의 경우 PyTorch 1.13.1+cu116 버전을 실행하는 MoAI의 24.2.0 버전이 설치되어 있음을 의미합니다.","만약 conda: command not found 메시지가 표시되거나, torch 패키지가 리스트되지 않거나, 혹은 torch 패키지가 존재하더라도 버전명에 “moreh”가 포함되지 않은 경우 Prepare Fine-tuning on MoAI Platform 문서에 따라 conda 환경을 생성하십시오."]},{"l":"PyTorch 동작 여부 확인하기","p":["다음과 같이 실행하여 torch 패키지가 정상적으로 import되고 MoAI Accelerator가 인식되는지 확인합니다."]},{"l":"필요 Python 패키지 설치","p":["다음과 같이 실행하여 스크립트 실행에 필요한 서드 파티 Python 패키지들을 미리 설치합니다."]},{"l":"학습 스크립트 다운로드","p":["다음과 같이 실행하여 GitHub 레포지토리에서 학습을 위한 PyTorch 스크립트를 다운로드합니다. 본 튜토리얼에서는 tutorial 디렉토리 안에 있는 train_mistral.py 스크립트를 사용할 것입니다."]},{"l":"학습 모델 및 토크나이저 다운로드","p":["Hugging Face를 이용해 Mistral 7B v0.1 모델의 체크포인트와 토크나이저를 다운로드 받습니다. 이때 Mistral 모델은 커뮤니티 라이센스 동의와 Hugging Face 토큰 정보가 필요합니다. 또한 Mistral 7B 모델의 경우 체크포인트 용량이 약 15GB이기 때문에 체크포인트를 위한 16GB 이상의 스토리지 여유가 권장됩니다.","먼저 다음 사이트에서 필요한 정보를 입력한 후 라이센스 동의를 진행합니다.","mistralai/Mistral-7B-v0.1 · Hugging Face","동의서 제출 후 페이지의 상태가 다음과 같이 변경된 것을 확인합니다.","상태 변경이 되었다면, 다음과 같이 tutorial 디렉토리 안의 download_mistral_7b.py 스크립트를 이용해 모델 체크포인트와 토크나이저를 ./mistral-7b 디렉토리에 다운로드 받을 수 있습니다.","user-token 은 사용자의 Hugging Face 토큰으로 치환합니다.","모델 체크포인트와 토크나이저가 다운로드 받아졌는지 확인합니다."]},{"l":"학습 데이터 다운로드","p":["이 튜토리얼에서는 코드 생성 훈련을 위해 공개된 여러 데이터셋들 중 Hugging Face에 공개되어 있는 python_code_instructions_18k_alpaca 데이터셋(11.4 MB)을 사용할 것입니다.","prepare_mistral_dataset.py 를 실행해 데이터셋을 다운로드하고, 학습에 사용할 수 있도록 전처리를 진행합니다.","전처리가 진행된 데이터셋은 mistral_dataset.pt 로 저장됩니다.","저장된 데이터셋은 코드상에서 다음과 같이 로드하여 사용할 수 있습니다."]}],[{"l":"2. Moreh의 학습 코드 톺아보기","p":["학습 데이터를 모두 준비하셨다면 다음으로는 실제 fine-tuning 과정을 실행할 train_mistral.py 스크립트의 내용을 살펴 보겠습니다. 이번 단계에서는 MoAI Platform은 pytorch와의 완전한 호환성으로 학습 코드가 일반적인 nvidia gpu를 위한 pytorch 코드와 100% 동일하다는 것을 확인하실 수 있습니다. 또한 이를 넘어서 기존의 복잡한 병렬화 기법들을 MoAI Platform에서는 얼마나 효율적으로 구현할 수 있는지도 확인하실 수 있습니다.","우선 제공된 스크립트를 그대로 사용하여 튜토리얼을 끝까지 진행해 보시기를 권장합니다. 이후 스크립트를 원하는 대로 수정하셔서 Mistral 7B 모델, 혹은 다른 공개된 모델을 다른 방식으로 fine-tuning하는 것도 얼마든지 가능합니다. 필요하시다면 Moreh에서 제공하는 MoAI Platform 응용 가이드( LLM Fine-tuning 파라미터 가이드)를 참고하십시오."]},{"l":"Training Code","p":["모든 코드는 일반적인 pytorch 사용 경험과 완벽하게 동일합니다.","먼저, transformers 라이브러리에서 필요한 모듈을 불러옵니다.","HuggingFace에 공개된 모델 config와 체크포인트를 불러옵니다.","Fine tuning 준비하기 단계에서 저장한 전처리된 데이터셋을 불러와 데이터로더를 정의합니다.","이후 학습도 일반적인 Pytorch를 사용하여 모델 학습과 동일하게 진행됩니다.","위와 같이 MoAI Platform에서는 기존 pytorch 코드와 동일한 방식으로 작성하실 수 있습니다."]},{"l":"About Advanced Parallelism","p":["본 튜토리얼에 사용되는 학습 스크립트에서는 아래와 같은 코드가 추가로 한 줄 존재합니다. 이는 MoAI Platform에서 제공하는 최고의 병렬화 기능을 수행하는 코드입니다.","본 튜토리얼에서 사용하는 Mistral 7B 와 같은 거대한 언어 모델의 경우 필연적으로 여러 개의 GPU를 사용하여 학습시켜야만 합니다. 이때, MoAI Platform이 아닌 다른 프레임워크를 사용할 경우, Data Parallel, Pipeline Parallel , Tensor Parallel과 같은 병렬화 기법을 도입하여 학습을 수행해야 합니다.","예를 들어, 사용자가 일반적인 pytorch 코드에서 DDP를 적용하고 싶다면, 다음과 같은 코드 스니펫이 추가되어야 합니다. ( https://pytorch.org/tutorials/intermediate/ddp_tutorial.html)","이와 같은 기본적인 세팅 이외에도 유저는 학습 스크립트 작성 과정에서 multi processing 환경에서의 Python 코드의 동작에 대해 이해하고 있어야 하며, 특히 multi node 세팅에서는 학습에 사용되는 노드들에 대한 환경 구성 작업이 추가적으로 들어가야 합니다. 게다가 모델의 종류, 크기, 데이터셋 등을 고려한 최적의 병렬화 방법을 찾기 위해서는 매우 많은 시간이 소요됩니다.","반면, MoAI Platform의 AP기능은 유저가 직접 이러한 추가적인 병렬화 기법을 적용할 필요 없이, 단지 학습 스크립트에 다음과 같은 코드 한 줄을 추가하는 것 만으로도 최적화된 병렬화 학습을 진행할 수 있습니다.","이렇듯 다른 프레임워크에서는 경험할 수 없는 병렬화의 최적화 및 자동화 기능인 MoAI Platform만의 Advanced Parallelization(AP)을 통해 최적의 분산 병렬처리 를 경험해보시기 바랍니다. AP기능을 이용하면 일반적으로 대규모 모델 훈련시 필요한 Pipeline Parallelism, Tensor Parallelism의 최적 매개변수와 환경변수 조합을 아주 간단한 코드 한 줄 을 통해 확보할 수 있습니다."]}],[{"l":"3. 학습 실행하기","p":["이제 실제로 fine tuning을 실행해 보겠습니다."]},{"l":"가속기 Flavor 설정","p":["(모든 문서에 추가될 그림 생성 예정)","AMD MI210 GPU 32개 사용","AMD MI250 GPU 16개 사용","AMD MI300X GPU 8개 사용","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보 문서를 참고하십시오.","LLM Fine-tuning 파라미터 가이드","MoAI Platform에서는 사용자에게 물리 GPU가 노출되지 않습니다. 대신 PyTorch에서 사용 가능한 가상의 MoAI Accelerator가 제공됩니다. 가속기의 flavor를 설정함으로써 실제로 PyTorch에서 물리 GPU를 얼마나 활용할지를 결정할 수 있습니다. 선택한 가속기 Flavor에 따라 학습 총 시간 및 gpu 사용 비용이 달라지므로 사용자의 학습 상황에 따른 판단이 필요합니다. 사용자의 학습 목표에 맞는 가속기 Flavor를 선택하기 위해 다음 문서를 참고하세요.","moreh-switch-model 툴을 사용하여 현재 시스템에서 사용 가능한 가속기 flavor 리스트를 확인할 수 있습니다. 원활한 모델 학습을 위해 moreh-switch-model 명령어를 이용해 더 큰 메모리의 MoAI Accelerator로 변경할 수 있습니다.","Moreh의 체험판 컨테이너 사용 시: 선택","q 를 입력해 변경을 완료합니다.","따라서 처음 설정되어 있던 flavor를 로 전환한 다음 moreh-smi 명령을 사용하여 정상적으로 반영되었는지 확인하겠습니다.","로 잘 변경된 것을 확인할 수 있습니다.","먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","변경 사항이 잘 반영되었는지 확인하기 위해 다시 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","사용을 위해 8을 입력합니다.","앞서 Mistral Fine-tuning 문서에서 MoAI Accelerator를 확인했던 것을 기억하시나요? 이제 본격적인 학습 실행을 위해 필요한 가속기를 설정해보겠습니다.","여기서 번호를 입력하여 다른 flavor로 전환할 수 있습니다.","이번 튜토리얼에서는 2048GB 크기의 MoAI Accelerator를 이용하겠습니다.","튜토리얼을 계속 진행하기 위해 인프라 제공자에게 각 flavor에 대응되는 GPU 종류 및 개수를 문의하십시오. 다음 중 하나에 해당하는 flavor를 선택하여 계속 진행하십시오.","현재 사용중인 MoAI Accelerator의 메모리 크기는 64GB입니다."]},{"l":"학습 실행","p":["주어진 train_mistral.py 스크립트를 실행합니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력 될 것입니다. 중간에 파란색으로 표시된 부분을 보시면 Advanced Parallelism 기능이 정상 동작하는 것을 확인할 수 있습니다. 앞서 살펴 본 PyTorch 스크립트 상에서는 GPU 여러 개를 동시에 사용하기 위한 처리가 전혀 없었음을 참고하십시오.","Loss 값이 다음과 같이 나타나며 정상 학습이 이루어지는 것을 확인할 수 있습니다.","학습 도중에 출력되는 throughput은 해당 PyTorch 스크립트를 통해 초당 몇 개의 token을 학습하고 있는지를 의미합니다.","AMD MI250 GPU 16개 사용 시: 약 60,000 tokens/sec","GPU 종류 및 개수에 따른 대략적인 학습 소요 시간은 다음과 같습니다.","AMD MI250 GPU 16개 사용 시: 약 50분"]},{"l":"학습 중에 가속기 상태 확인","p":["학습 중에 터미널을 하나 더 열어서 컨테이너에 접속한 후에 moreh-smi 명령을 실행하면 MoAI Accelerator의 메모리를 차지하며 학습 스크립트가 실행되고 있는 것을 확인할 수 있습니다. 실행 로그를 보면 초기화가 완료되고 Loss가 출력되는 도중에 확인해 보시기 바랍니다."]}],[{"l":"4. 학습 결과 확인하기","p":["앞 장과 같이 train_mistral.py 스크립트를 실행하면 결과 모델이 mistral_code_generation 디렉터리에 저장됩니다. 이는 순수한 PyTorch 모델 파라미터 파일로 MoAI Platform이 아닌 일반 GPU 서버에서도 100% 호환됩니다.","미리 다운로드한 GitHub 레포지토리의 tutorial 디렉토리 아래에 있는 inference_mistral.py 스크립트로 학습된 모델을 테스트해 볼 수 있습니다. 테스트에는 ‘주어진 문자열 리스트를 입력 받아 공백으로 결합하는 함수를 만들어’라는 프롬프트가 사용되었습니다.","코드를 실행합니다.","출력값을 확인해보면 모델이 프롬프트 내용대로 적절한 함수를 생성한 것을 확인할 수 있습니다."]}],[{"l":"5. GPU 개수 변경하기","p":["앞과 동일한 fine-tuning 작업을 GPU 개수를 바꾸어 다시 실행해 보겠습니다. GPU 개수를 변경하여 다시 실행해 보겠습니다. MoAI Platform은 GPU 자원을 단일 가속기로 추상화하여 제공하므로 자동으로 병렬 처리를 수행합니다. 따라서 GPU 개수를 변경하더라도 PyTorch 스크립트를 전혀 수정할 필요가 없습니다."]},{"l":"가속기 Flavor 변경","p":["moreh-switch-model 을 사용하여 가속기 flavor를 전환합니다. 가속기 변경 방법은 3. 학습 실행하기 문서를 한번 더 참고해주시기 바랍니다.","인프라 제공자에게 문의하여 다음 중 하나를 선택한 다음 계속 진행하십시오. ( KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보)","AMD MI250 GPU 32개 사용","Moreh의 체험판 컨테이너 사용 시: 선택","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","AMD MI210 GPU 64개 사용","AMD MI300X GPU 16개 사용"]},{"l":"학습 실행","p":["배치 사이즈 변경 없이 train_mistral.py 스크립트를 실행합니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력될 것입니다.","앞서 GPU 개수가 절반이었을 때 실행한 결과와 비교해 동일하게 학습이 이루어지며 throughput이 향상되었음을 확인할 수 있습니다.","AMD MI250 GPU 16 → 32개 사용 시: 약 60,000 tokens/sec → 110,000 tokens/sec"]}],[{"l":"6. 마무리","p":["지금까지 MoAI Platform에서 Mistral 7B 모델을 fine-tuning하는 과정을 살펴 보았습니다. MoAI Platform을 사용하면 기존의 학습 코드를 그대로 사용하면서 PyTorch 기반 오픈 소스 LLM 모델을 쉽게 GPU 클러스터에서 fine-tuning할 수 있습니다. 또한, MoAI 플랫폼을 사용한다면 여러분이 필요한 GPU 수를 코드 변경 없이 손쉽게 설정할 수 있습니다. 여러분만의 데이터로 새로운 모델을 빠르고 쉽게 개발해 보세요."]},{"l":"더 알아보기","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Llama2 Fine-tuning","GPT Fine-tuning","Baichuan2 Fine-tuning","Qwen Fine-tuning"]}],[{"l":"GPT Fine-tuning","p":["이 튜토리얼은 MoAI Platform에서 Hugging Face 에 오픈소스로 공개된 GPT 기반의 모델을 fine-tuning하는 예시를 소개합니다. 튜토리얼을 통해 MoAI Platform으로 AMD GPU 클러스터를 사용하는 방법을 익히고 성능 및 자동 병렬화의 이점을 확인할 수 있습니다."]},{"l":"개요","p":["GPT는 Transformer decoder 구조만을 사용한 언어 모델 아키텍처로써, 2018년 OpenAI 에서 GPT-1을 통해 처음 공개하였습니다. 이후 OpenAI에서는 사전학습에 사용되는 데이터셋 크기와 모델 파라미터를 늘려가며 GPT-2를 거쳐 GPT-3, GPT-4 모델을 개발했으며 이 중 오픈소스로 공개된 모델은 GPT-1, GPT-2 입니다.","GPT의 기본적인 아키텍처는 오픈소스로 공개되어 있기 때문에 Huggingface에서는 OpenAI에서 개발한 모델 이외에도 다양한 GPT 기반의 모델을 찾아볼 수 있습니다.","이 튜토리얼에서는 코드 생성 태스크에 대해 MoAI Platform을 활용해 Cerebras-GPT-13B 모델을 fine-tuning 해보겠습니다."]},{"l":"시작하기 전에","p":["MoAI Platform 상의 컨테이너 혹은 가상 머신을 인프라 제공자로부터 발급받고, 여기에 SSH로 접속하는 방법을 안내 받으시기 바랍니다. 예를 들어 MoAI Platform 기반으로 운영되는 다음 퍼블릭 클라우드 서비스를 신청하여 사용할 수 있습니다.","KT Cloud의 Hyperscale AI Computing ( https://cloud.kt.com/solution/hyperscaleAiComputing/)","혹은 일시적으로 체험판 컨테이너 및 GPU 자원을 할당 받기를 원하시는 분은 Moreh( support@moreh.io)에 문의하시기 바랍니다.","SSH로 접속한 다음 moreh-smi 명령을 실행하여 MoAI Accelerator가 잘 표시되는지 확인하시기 바랍니다. 디바이스 이름은 시스템마다 다르게 설정되어 있을 수 있습니다."]},{"l":"MoAI Accelerator 확인","p":["이 튜토리얼에서 안내할 GPT 모델과 같은 sLLM을 학습하기 위해서는 적절한 크기의 MoAI Accelerator를 선택해야 합니다. 먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","수행할 학습에 필요한 구체적인 MoAI Accelerator 설정에 대한 설명은 3. 학습 실행하기 에서 제공하겠습니다."]}],[{"l":"1. Fine-tuning 준비하기","p":["MoAI Platform에서 PyTorch 스크립트 실행 환경을 준비하는 것은 일반적인 GPU 서버에서와 크게 다르지 않습니다."]},{"l":"PyTorch 설치 여부 확인하기","p":["SSH로 컨테이너에 접속한 다음 아래와 같이 실행하여 현재 conda 환경에 PyTorch가 설치되어 있는지 확인합니다.","버전명에는 PyTorch 버전과 이를 실행시키기 위한 MoAI 버전이 함께 표시되어 있습니다. 위 예시의 경우 PyTorch 1.13.1+cu116 버전을 실행하는 MoAI의 24.2.0 버전이 설치되어 있음을 의미합니다.","만약 conda: command not found 메시지가 표시되거나, torch 패키지가 리스트되지 않거나, 혹은 torch 패키지가 존재하더라도 버전명에 “moreh”가 포함되지 않은 경우 (Prepare Fine-tuning on MoAI Platform) 문서에 따라 conda 환경을 생성하십시오."]},{"l":"PyTorch 동작 여부 확인하기","p":["다음과 같이 실행하여 torch 패키지가 정상적으로 import되고 MoAI Accelerator가 인식되는지 확인합니다."]},{"l":"필요 Python 패키지 설치","p":["다음과 같이 실행하여 스크립트 실행에 필요한 서드 파티 Python 패키지들을 미리 설치합니다."]},{"l":"학습 스크립트 다운로드","p":["다음과 같이 실행하여 GitHub 레포지토리에서 학습을 위한 PyTorch 스크립트를 다운로드합니다. 본 튜토리얼에서는 tutorial 디렉토리 안에 있는 train_gpt.py 스크립트를 사용할 것입니다."]},{"l":"학습 데이터 다운로드","p":["Huggingface에서는 model checkpoint뿐만 아니라 model fine-tuning에 사용할 수 있는 다양한 데이터셋이 공개되어 있습니다.","이번 튜토리얼에서 저희는 mlabonne/Evol-Instruct-Python-26k 데이터셋을 사용할 것입니다. 이 데이터셋은 주어진 질문 조건과 주어진 질문 조건에 맞게 작성된 python 코드로 이루어져 있습니다.","학습 데이터를 다운로드 받기 위해 dataset 디렉토리 안에 있는 prepare_gpt_dataset.py 스크립트를 통해 huggingface에 공개된 데이터셋을 다운로드하고, fine-tuning 학습에 바로 사용할 수 있도록 전처리를 진행하겠습니다.","전처리가 진행된 데이터셋은 gpt_dataset.pt 로 저장됩니다.","저장된 데이터셋은 코드상에서 다음과 같이 로드하여 사용할 수 있습니다."]}],[{"l":"2. Moreh의 학습 코드 톺아보기","p":["학습 데이터를 모두 준비하셨다면 다음으로는 실제 fine-tuning 과정을 실행할 train_gpt.py 스크립트의 내용을 살펴 보겠습니다. 이번 단계에서는 MoAI Platform은 pytorch와의 완전한 호환성으로 학습 코드가 일반적인 nvidia gpu를 위한 pytorch 코드와 100% 동일하다는 것을 확인하실 수 있습니다. 또한 이를 넘어서 기존의 복잡한 병렬화 기법들을 MoAI Platform에서는 얼마나 효율적으로 구현할 수 있는지도 확인하실 수 있습니다.","우선 제공된 스크립트를 그대로 사용하여 튜토리얼을 끝까지 진행해 보시기를 권장합니다. 이후 스크립트를 원하는 대로 수정하셔서 Cerebras-GPT-13B 모델, 혹은 다른 공개된 모델을 다른 방식으로 fine-tuning하는 것도 얼마든지 가능합니다. 필요하시다면 Moreh에서 제공하는 MoAI Platform 응용 가이드( LLM Fine-tuning 파라미터 가이드)를 참고하십시오."]},{"l":"Training Code","p":["모든 코드는 일반적인 pytorch 사용 경험과 완벽하게 동일합니다.","먼저, transformers 라이브러리에서 필요한 모듈을 불러옵니다.","HuggingFace에 공개된 모델 config와 체크포인트를 불러옵니다.","Fine tuning 준비하기 단계에서 저장한 전처리된 데이터셋을 불러와 데이터로더를 정의합니다.","이후 학습도 일반적인 Pytorch를 사용하여 모델 학습과 동일하게 진행됩니다.","위와 같이 MoAI Platform에서는 기존 pytorch 코드와 동일한 방식으로 작성하실 수 있습니다."]},{"l":"About Advanced Parallelism","p":["본 튜토리얼에 사용되는 학습 스크립트에서는 아래와 같은 코드가 추가로 한 줄 존재합니다. 이는 MoAI Platform에서 제공하는 최고의 병렬화 기능을 수행하는 코드입니다.","본 튜토리얼에서 사용하는 Cerebras-GPT-13B 과 같은 거대한 언어 모델의 경우 필연적으로 여러 개의 GPU를 사용하여 학습시켜야만 합니다. 이때, MoAI Platform이 아닌 다른 프레임워크를 사용할 경우, Data Parallel, Pipeline Parallel, Tensor Parallel과 같은 병렬화 기법을 도입하여 학습을 수행해야 합니다.","예를 들어, 사용자가 일반적인 pytorch 코드에서 DDP를 적용하고 싶다면, 다음과 같은 코드 스니펫이 추가되어야 합니다. ( https://pytorch.org/tutorials/intermediate/ddp_tutorial.html)","이와 같은 기본적인 세팅 이외에도 유저는 학습 스크립트 작성 과정에서 multi processing 환경에서의 Python 코드의 동작에 대해 이해하고 있어야 하며, 특히 multi node 세팅에서는 학습에 사용되는 노드들에 대한 환경 구성 작업이 추가적으로 들어가야 합니다. 게다가 모델의 종류, 크기, 데이터셋 등을 고려한 최적의 병렬화 방법을 찾기 위해서는 매우 많은 시간이 소요됩니다.","반면, MoAI Platform의 AP기능은 유저가 직접 이러한 추가적인 병렬화 기법을 적용할 필요 없이, 단지 학습 스크립트에 다음과 같은 코드 한 줄을 추가하는 것 만으로도 최적화된 병렬화 학습을 진행할 수 있습니다.","이렇게 MoAI Platform만의 Advanced Parallelization(AP)은 다른 프레임워크에서는 경험할 수 없는 병렬화의 최적화 및 자동화 기능입니다. 이를 통해 최적의 분산 병렬 처리 를 경험해 보실 수 있습니다. AP기능을 활용하면 대규모 모델 훈련 시 필요한 Pipeline Parallelism, Tensor Parallelism의 최적 매개변수와 환경변수 조합을 매우 간단한 코드 한 줄 로 설정할 수 있습니다."]}],[{"l":"3. 학습 실행하기","p":["이제 실제로 fine tuning을 실행해 보겠습니다."]},{"l":"가속기 Flavor 설정","p":["(모든 문서에 추가될 그림 생성 예정)","AMD MI210 GPU 32개 사용","AMD MI250 GPU 16개 사용","AMD MI300X GPU 8개 사용","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보","LLM Fine-tuning 파라미터 가이드","MoAI Platform에서는 사용자에게 물리 GPU가 노출되지 않습니다. 대신 PyTorch에서 사용 가능한 가상의 MoAI Accelerator가 제공됩니다. 가속기의 flavor를 설정함으로써 실제로 PyTorch에서 물리 GPU를 얼마나 활용할지를 결정할 수 있습니다. 선택한 가속기 Flavor에 따라 총 학습 시간 및 GPU 사용 비용이 달라지므로 사용자의 학습 상황에 따른 판단이 필요합니다. 사용자의 학습 목표에 맞는 가속기 Flavor를 선택하기 위해 다음 문서를 참고하세요.","moreh-switch-model 툴을 사용하여 현재 시스템에서 사용 가능한 가속기 flavor 리스트를 확인할 수 있습니다. 원활한 모델 학습을 위해 moreh-switch-model 명령어를 이용해 더 큰 메모리의 MoAI Accelerator로 변경할 수 있습니다.","Moreh의 체험판 컨테이너 사용 시: 선택","q 를 입력해 변경을 완료합니다.","따라서 처음 설정되어 있던 flavor를 로 전환한 다음 moreh-smi 명령을 사용하여 정상적으로 반영되었는지 확인하겠습니다.","로 잘 변경된 것을 확인할 수 있습니다.","먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","변경 사항이 잘 반영되었는지 확인하기 위해 다시 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","사용을 위해 8을 입력합니다.","앞서 GPT Fine-tuning 문서에서 MoAI Accelerator를 확인했던 것을 기억하시나요? 이제 본격적인 학습 실행을 위해 필요한 가속기를 설정해보겠습니다.","여기서 번호를 입력하여 다른 flavor로 전환할 수 있습니다.","이번 튜토리얼에서는 2048GB 크기의 MoAI Accelerator를 이용하겠습니다.","튜토리얼을 계속 진행하기 위해 인프라 제공자에게 각 flavor에 대응되는 GPU 종류 및 개수를 문의하십시오. 다음 중 하나에 해당하는 flavor를 선택하여 계속 진행하십시오.","현재 사용중인 MoAI Accelerator의 메모리 크기는 256GB입니다."]},{"l":"학습 실행","p":["주어진 train_gpt.py 스크립트를 실행합니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력 될 것입니다. 로그를 통해 최적의 병렬화 설정을 찾는 Advanced Parallelism 기능이 정상 동작하는 것을 확인할 수 있습니다. 앞서 살펴 본 PyTorch 스크립트 상에서는 AP 코드 한 줄을 제외한 다른 부분에서 GPU 여러 개를 동시에 사용하기 위한 처리가 전혀 없었음을 참고하십시오.","Loss 값이 다음과 같이 떨어지며 정상 학습이 이루어지는 것을 확인할 수 있습니다.","학습 도중에 출력되는 throughput은 해당 PyTorch 스크립트를 통해 초당 몇 개의 token을 학습하고 있는지를 의미합니다.","AMD MI250 GPU 16개 사용 시: 약 17000 tokens/sec","GPU 종류 및 개수에 따른 대략적인 학습 소요 시간은 다음과 같습니다.","AMD MI250 GPU 16개 사용 시: 약 00분"]},{"l":"학습 중에 가속기 상태 확인","p":["학습 도중에 터미널을 하나 더 띄워서 컨테이너에 접속한 후 moreh-smi 명령을 실행하시면 다음과 같이 MoAI Accelerator의 메모리를 점유하며 학습 스크립트가 실행되는 것을 확인하실 수 있습니다. 실행 로그상에서 초기화 과정이 끝나고 Step 1~ 15가 출력되는 도중에 확인해 보시기 바랍니다."]}],[{"l":"4. 학습 결과 확인하기","p":["앞 장과 같이 train_gpt.py 스크립트를 실행하면 결과 모델이 code_generation 디렉토리에 저장됩니다. 이는 순수한 PyTorch 모델 파라미터 파일로 MoAI Platform이 아닌 일반 GPU 서버에서도 100% 호환됩니다.","미리 다운로드한 GitHub 레포지토리의 tutorial 디렉토리 아래에 있는 inference_gpt.py 스크립트로 학습된 모델을 테스트해 볼 수 있습니다.","코드를 실행합니다.","출력값을 확인해보면 모델이 프롬프트 내용대로 적절한 함수를 생성한 것을 확인할 수 있습니다."]}],[{"l":"5. GPU 개수 변경하기","p":["앞과 동일한 fine-tuning 작업을 GPU 개수를 바꾸어 다시 실행해 보겠습니다. MoAI Platform은 GPU 자원을 단일 가속기로 추상화하여 제공하며 자동으로 병렬 처리를 수행합니다. 따라서 GPU 개수를 변경하더라도 PyTorch 스크립트는 전혀 고칠 필요가 없습니다."]},{"l":"가속기 Flavor 변경","p":["moreh-switch-model 툴을 사용하여 가속기 flavor를 전환합니다. 가속기 변경 방법은 3. 학습 실행하기 문서를 한번 더 참고해주시기 바랍니다.","인프라 제공자에게 문의하여 다음 중 하나를 선택한 다음 계속 진행하십시오. ( KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보)","AMD MI250 GPU 32개 사용","Moreh의 체험판 컨테이너 사용 시: 선택","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","AMD MI210 GPU 64개 사용","AMD MI300X GPU 16개 사용"]},{"l":"학습 실행","p":["다시 train_gpt.py 스크립트를 실행합니다.","사용 가능한 GPU 메모리가 2배가 늘었기 때문에, 배치 사이즈 또한 64로 변경하여 실행시켜 보겠습니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력될 것입니다.","앞서 GPU 개수가 절반이었을 때 실행한 결과와 비교해 동일하게 학습이 이루어지며 throughput이 향상되었음을 확인할 수 있습니다.","AMD MI250 GPU 16 → 32개 사용 시: 약 17000 tokens/sec → 34000 tokens/sec"]}],[{"l":"6. 마무리","p":["지금까지 MoAI Platform에서 HuggingFace에 공개된 GPT 기반 모델을 fine-tuning하는 과정을 살펴 보았습니다. MoAI Platform을 사용하면 기존의 학습 코드를 그대로 사용하면서 PyTorch 기반 오픈 소스 LLM 모델을 쉽게 GPU 클러스터에서 fine-tuning할 수 있습니다. 또한, MoAI 플랫폼을 사용한다면 여러분이 필요한 GPU 수를 코드 변경 없이 손쉽게 설정할 수 있습니다. 여러분만의 데이터로 새로운 모델을 빠르고 쉽게 개발해 보세요."]},{"l":"더 알아보기","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Llama2 Fine-tuning","Mistral Fine-tuning","Baichuan2 Fine-tuning","Qwen Fine-tuning"]}],[{"l":"Qwen Fine-tuning","p":["이 튜토리얼은 MoAI Platform에서 오픈 소스 Qwen1.5 7B 모델을 fine-tuning 하는 예시를 소개합니다. 이를 통해 MoAI Platform으로 AMD GPU 클러스터를 사용하는 방법을 배우고 성능 및 자동 병렬화의 장점을 확인할 수 있습니다."]},{"l":"개요","p":["Qwen1.5 7B 모델은 중국의 Tongyi Qianwen(通义千问) 사에서 공개한 오픈소스 LLM입니다. 이 튜토리얼에서는 MoAI Platform에서 코드 생성(code generation) 태스크에 대해 시스템 프롬프트, 코드 생성을 위한 지시문, 입력값과 생성해야 할 코드로 구성되어 있는 python_code_instruction_18k_alpaca 데이터셋을 활용해 Qwen1.5 7B 모델을 fine-tuning 해보겠습니다."]},{"l":"시작하기 전에","p":["MoAI Platform 상의 컨테이너 혹은 가상 머신을 인프라 제공자로부터 발급받고, 여기에 SSH로 접속하는 방법을 안내 받으시기 바랍니다. 예를 들어 MoAI Platform 기반으로 운영되는 다음 퍼블릭 클라우드 서비스를 신청하여 사용할 수 있습니다.","KT Cloud의 Hyperscale AI Computing ( https://cloud.kt.com/solution/hyperscaleAiComputing/)","혹은 일시적으로 체험판 컨테이너 및 GPU 자원을 할당 받기를 원하시는 분은 Moreh( support@moreh.io)에 문의하시기 바랍니다.","SSH로 접속한 다음 moreh-smi 명령을 실행하여 MoAI Accelerator가 잘 표시되는지 확인하시기 바랍니다. 디바이스 이름은 시스템마다 다르게 설정되어 있을 수 있습니다."]},{"l":"MoAI Accelerator 확인","p":["이 튜토리얼에서 안내할 Qwen 모델과 같은 sLLM을 학습하기 위해서는 적절한 크기의 MoAI Accelerator를 선택해야 합니다. 먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","수행할 학습에 필요한 구체적인 MoAI Accelerator 설정에 대한 설명은 3. 학습 실행하기 에서 제공하겠습니다."]}],[{"l":"1. Fine-tuning 준비하기","p":["MoAI Platform에서 PyTorch 스크립트 실행 환경을 준비하는 것은 일반적인 GPU 서버에서와 크게 다르지 않습니다."]},{"l":"PyTorch 설치 여부 확인하기","p":["SSH로 컨테이너에 접속한 다음 아래와 같이 실행하여 현재 conda 환경에 PyTorch가 설치되어 있는지 확인합니다.","버전명에는 PyTorch 버전과 이를 실행시키기 위한 MoAI 버전이 함께 표시되어 있습니다. 위 예시의 경우 PyTorch 1.13.1+cu116 버전을 실행하는 MoAI의 24.2.0 버전이 설치되어 있음을 의미합니다.","만약 conda: command not found 메시지가 표시되거나, torch 패키지가 리스트되지 않거나, 혹은 torch 패키지가 존재하더라도 버전명에 “moreh”가 포함되지 않은 경우 (Prepare Fine-tuning on MoAI Platform) 문서에 따라 conda 환경을 생성하십시오."]},{"l":"PyTorch 동작 여부 확인하기","p":["다음과 같이 실행하여 torch 패키지가 정상적으로 import되고 MoAI Accelerator가 인식되는지 확인합니다."]},{"l":"필요 Python 패키지 설치","p":["다음과 같이 실행하여 스크립트 실행에 필요한 서드 파티 Python 패키지들을 미리 설치합니다."]},{"l":"학습 스크립트 다운로드","p":["다음과 같이 실행하여 GitHub 레포지토리에서 학습을 위한 PyTorch 스크립트를 다운로드합니다. 본 튜토리얼에서는 tutorial 디렉토리 안에 있는 train_qwen.py 스크립트를 사용할 것입니다."]},{"l":"학습 데이터 다운로드","p":["학습 데이터를 다운로드하기 위해 dataset 디렉터리 안에 있는 prepare_qwen_dataset.py 스크립트를 사용하겠습니다. 코드를 실행하면 python_code_instruction_18k_alpaca 데이터를 다운로드하고 학습에 사용할 수 있도록 전처리를 진행하여 qwen_dataset.pt 파일로 저장합니다.","전처리가 진행된 데이터셋은 qwen_dataset.pt 로 저장됩니다.","저장된 데이터셋은 코드상에서 다음과 같이 로드하여 사용할 수 있습니다."]}],[{"l":"2. Moreh의 학습 코드 톺아보기","p":["학습 데이터를 모두 준비하셨다면 다음으로는 실제 fine-tuning 과정을 실행할 train_qwen.py 스크립트의 내용에 대해 살펴 보겠습니다. 이 스크립트는 통상적인 PyTorch 코드로서 Hugging Face Transformers 라이브러리에 있는 Qwen 모델 구현을 기반으로 fine-tuning 작업을 실행합니다.","이번 단계에서는 MoAI Platform은 pytorch와의 완전한 호환성으로 학습 코드가 일반적인 nvidia gpu를 위한 pytorch 코드와 100% 동일하다는 것을 확인하실 수 있습니다. 또한 이를 넘어서 기존의 복잡한 병렬화 기법들을 MoAI Platform에서는 얼마나 효율적으로 구현할 수 있는지도 확인하실 수 있습니다.","우선 제공된 스크립트를 그대로 사용하여 튜토리얼을 끝까지 진행해 보시기를 권장합니다. 이후 스크립트를 원하는 대로 수정하셔서 Qwen1.5 7B 모델을 다른 방식으로 fine-tuning하는 것도 얼마든지 가능합니다. MoAI Platform은 PyTorch와의 완전한 호환성을 제공하기 때문입니다. 필요하시다면 Moreh에서 제공하는 MoAI Platform 응용 가이드( LLM Fine-tuning 파라미터 가이드) 참고하십시오."]},{"l":"Training Code","p":["모든 코드는 일반적인 pytorch 사용 경험과 완벽하게 동일합니다.","먼저, transformers 라이브러리에서 필요한 모듈을 불러옵니다.","HuggingFace에 공개된 모델 config와 체크포인트를 불러옵니다.","Fine tuning 준비하기 단계에서 저장한 전처리된 데이터셋을 불러와 데이터로더를 정의합니다.","이후 학습도 일반적인 Pytorch를 사용하여 모델 학습과 동일하게 진행됩니다.","위와 같이 MoAI Platform에서는 기존 pytorch 코드와 동일한 방식으로 작성하실 수 있습니다."]},{"l":"About Advanced Parallelism","p":["본 튜토리얼에 사용되는 학습 스크립트에는 아래와 같은 코드가 추가로 한 줄 존재합니다. 이는 MoAI Platform에서 제공하는 자동 병렬화 기능을 수행하는 코드입니다.","본 튜토리얼에서 사용하는 Qwen1.5 7B 와 같은 거대한 언어 모델을 학습시키기 위해서는 필연적으로 여러 개의 GPU를 사용해야 합니다. 다른 프레임워크를 사용할 경우 Data Parallel, Pipeline Parallel, Tensor Parallel 등의 병렬화 기법을 도입하여 학습을 진행해야 합니다.","예를 들어, 사용자가 일반적인 pytorch 코드에서 DDP를 적용하고 싶다면, 다음과 같은 코드 스니펫이 추가되어야 합니다. ( https://pytorch.org/tutorials/intermediate/ddp_tutorial.html)","이러한 기본적인 설정 외에도, 사용자는 학습 스크립트 작성 과정에서 Python 코드가 multi processing 환경에서 어떻게 작동하는지 이해해야 합니다. 특히 multi node 세팅에서는 학습에 사용되는 각 노드의 환경 구성 작업이 추가로 필요합니다. 또한, 모델의 종류, 크기, 데이터셋 등을 고려하여 최적의 병렬화 방법을 찾는 작업은 상당한 시간이 소요됩니다.","반면 MoAI Platform을 사용하면 이러한 복잡한 병렬화 기법을 직접 구현할 필요 없이 학습 스크립트에 한 줄의 코드를 추가하는 것만으로도 최적화된 병렬화 학습을 진행할 수 있습니다.","이렇듯 다른 프레임워크에서는 경험할 수 없는 병렬화의 최적화 및 자동화 기능인 MoAI Platform만의 Advanced Parallelization(AP)을 통해 최적의 분산 병렬처리 를 경험해보시기 바랍니다. AP기능을 이용하면 일반적으로 대규모 모델 훈련시 필요한 Pipeline Parallelism, Tensor Parallelism의 최적 매개변수와 환경변수 조합을 아주 간단한 코드 한 줄 을 통해 확보할 수 있습니다."]}],[{"l":"3. 학습 실행하기","p":["이제 실제로 fine tuning을 실행해 보겠습니다."]},{"l":"가속기 Flavor 설정","p":["(모든 문서에 추가될 그림 생성 예정)","AMD MI210 GPU 32개 사용","AMD MI250 GPU 16개 사용","AMD MI300X GPU 8개 사용","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보 문서를 참고하십시오.","LLM Fine-tuning 파라미터 가이드","MoAI Platform에서는 사용자에게 물리 GPU가 노출되지 않습니다. 대신 PyTorch에서 사용 가능한 가상의 MoAI Accelerator가 제공됩니다. 사용자는 가속기의 Flavor를 설정하여 실제 물리 GPU를 어떻게 활용할지 결정할 수 있습니다. 선택한 가속기 Flavor에 따라 총 학습 시간과 GPU 사용 비용이 달라지므로 사용자는 학습 상황에 따라 판단해야 합니다. 사용자의 학습 목표에 맞는 가속기 Flavor를 선택하기 위해 다음 문서를 참고하세요.","moreh-switch-model 툴을 사용하여 현재 시스템에서 사용 가능한 가속기 flavor 리스트를 확인할 수 있습니다. 원활한 모델 학습을 위해 moreh-switch-model 명령어를 이용해 더 큰 메모리의 MoAI Accelerator로 변경할 수 있습니다.","Moreh의 체험판 컨테이너 사용 시: 선택","q 를 입력해 변경을 완료합니다.","다음 중 하나에 해당하는 flavor를 선택하여 계속 진행하십시오.","따라서 처음 설정되어 있던 flavor를 로 전환한 다음 moreh-smi 명령을 사용하여 정상적으로 반영되었는지 확인하겠습니다.","로 잘 변경된 것을 확인할 수 있습니다.","먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","변경 사항이 잘 반영되었는지 확인하기 위해 다시 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","사용을 위해 8을 입력합니다.","앞서 Qwen Fine-tuning 문서에서 MoAI Accelerator를 확인했던 것을 기억하시나요? 이제 본격적인 학습 실행을 위해 필요한 가속기를 설정해보겠습니다.","여기서 번호를 입력하여 다른 flavor로 전환할 수 있습니다.","위 문서를 참고하시거나 인프라 제공자에게 각 flavor에 대응되는 GPU 종류 및 개수를 문의하십시오.","이번 튜토리얼에서는 2048GB 크기의 MoAI Accelerator를 이용하겠습니다.","현재 사용중인 MoAI Accelerator의 메모리 크기는 512GB입니다."]},{"l":"학습 실행","p":["주어진 train_qwen.py 스크립트를 실행합니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력될 것입니다. 중간에 파란색으로 표시된 부분을 보시면 Advanced Parallelism 기능이 정상 동작하는 것을 확인할 수 있습니다. 앞서 살펴본 PyTorch 스크립트에서는 AP 코드 한 줄을 제외한 다른 부분에서 GPU 여러 개를 동시에 사용하기 위한 처리가 전혀 없었음을 참고하십시오.","Loss 값이 아래와 같이 나타나며 정상적으로 학습이 진행되고 있음을 확인할 수 있습니다.","학습 중에 표시되는 throughput은 해당 PyTorch 스크립트를 통해 초당 몇 개의 토큰을 학습하고 있는지를 의미합니다.","AMD MI250 GPU 16개 사용 시: 약 59,000 tokens/sec","GPU 종류 및 개수에 따른 대략적인 학습 소요 시간은 다음과 같습니다.","AMD MI250 GPU 16개 사용 시: 약 40분"]},{"l":"학습 중에 가속기 상태 확인","p":["학습 도중에 터미널을 하나 더 띄워서 컨테이너에 접속한 후 moreh-smi 명령을 실행하시면 다음과 같이 MoAI Accelerator의 메모리가 차지되는 것을 확인할 수 있습니다. 실행 로그를 보면 초기화 과정이 완료되고 Loss가 출력되는 도중에 확인해 보세요."]}],[{"l":"4. 학습 결과 확인하기","p":["앞 장과 같이 train_qwen.py 스크립트를 실행하면 결과 모델이 qwen_code_generation 디렉터리에 저장됩니다. 이는 순수한 PyTorch 모델 파라미터 파일로, MoAI Platform이 아닌 일반 GPU 서버에서도 완벽히 호환됩니다.","미리 다운로드한 GitHub 레포지토리의 tutorial 디렉터리 아래에 있는 inference_qwen.py 스크립트로 학습된 모델을 테스트해 볼 수 있습니다. 테스트에서는 \"주어진 문자열 리스트를 입력받아 공백으로 결합하는 함수를 만들어\"라는 프롬프트가 사용되었습니다.","코드를 실행합니다.","출력값을 확인해보면 모델이 프롬프트 내용대로 적절한 함수를 생성한 것을 확인할 수 있습니다."]}],[{"l":"5. GPU 개수 변경하기","p":["앞과 동일한 fine tuning 작업을 GPU 개수를 바꾸어 다시 실행해 보겠습니다. MoAI Platform은 GPU 자원을 단일 가속기로 추상화하여 제공하며 자동으로 병렬 처리를 수행합니다. 그러므로 GPU 개수를 변경하더라도 PyTorch 스크립트를 수정할 필요가 전혀 없습니다."]},{"l":"가속기 Flavor 변경","p":["moreh-switch-model 툴을 사용하여 가속기 flavor를 전환합니다. 가속기 변경 방법은 3. 학습 실행하기 문서를 한번 더 참고해주시기 바랍니다.","인프라 제공자에게 문의하여 다음 중 하나를 선택한 다음 계속 진행하십시오. ( KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보)","AMD MI250 GPU 32개 사용","Moreh의 체험판 컨테이너 사용 시: 선택","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","AMD MI210 GPU 64개 사용","AMD MI300X GPU 16개 사용"]},{"l":"학습 실행","p":["다시 별도의 배치 사이즈 변경 없이 train_qwen.py 스크립트를 실행합니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력될 것입니다.","앞서 GPU 개수가 절반이었을 때 실행한 결과와 비교해 동일하게 학습이 이루어지며 throughput이 향상되었음을 확인할 수 있습니다.","AMD MI250 GPU 16 → 32개 사용 시: 약 59,000 tokens/sec → 105,000 tokens/sec"]}],[{"l":"6. 마무리","p":["지금까지 MoAI Platform에서 Qwen1.5 7B 모델을 fine-tuning하는 과정을 살펴 보았습니다. MoAI Platform을 사용하면 기존의 학습 코드를 그대로 사용하면서 PyTorch 기반 오픈 소스 LLM 모델을 쉽게 GPU 클러스터에서 fine-tuning할 수 있습니다. 또한, MoAI 플랫폼을 사용한다면 여러분이 필요한 GPU 수를 코드 변경 없이 손쉽게 설정할 수 있습니다. 여러분만의 데이터로 새로운 모델을 빠르고 쉽게 개발해 보세요."]},{"l":"더 알아보기","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Llama2 Fine-tuning","Mistral Fine-tuning","GPT Fine-tuning","Baichuan2 Fine-tuning"]}],[{"l":"Baichuan2 Fine-tuning","p":["이 튜토리얼은 MoAI Platform에서 오픈 소스 Baichuan2 13B 모델을 fine-tuning하는 예시를 소개합니다. 튜토리얼을 통해 MoAI Platform으로 AMD GPU 클러스터를 사용하는 방법을 익히고 성능 및 자동 병렬화의 이점을 확인할 수 있습니다."]},{"l":"개요","p":["Baichuan2는 Baichuan Intelligent Technology 가 개발한 오픈 소스, 대규모 다국어 언어 모델입니다. 이 모델은 2조 6천억 개의 토큰으로 구성된 방대한 데이터 세트에서 훈련된 70억 및 130억 매개 변수로 사용할 수 있는 구성을 가지고 있습니다.","이 튜토리얼에서는 MoAI Platform에서 text-generation e-commerce 데이터셋인 Bitext-customer-support-llm-chatbot-training-dataset 을 활용해 Baichuan2 13B 모델을 fine-tuning 해보겠습니다."]},{"l":"시작하기 전에","p":["MoAI Platform 상의 컨테이너 혹은 가상 머신을 인프라 제공자로부터 발급받고, 여기에 SSH로 접속하는 방법을 안내 받으시기 바랍니다. 예를 들어 MoAI Platform 기반으로 운영되는 다음 퍼블릭 클라우드 서비스를 신청하여 사용할 수 있습니다.","KT Cloud의 Hyperscale AI Computing ( https://cloud.kt.com/solution/hyperscaleAiComputing/)","혹은 일시적으로 체험판 컨테이너 및 GPU 자원을 할당 받기를 원하시는 분은 Moreh( support@moreh.io)에 문의하시기 바랍니다.","SSH로 접속한 다음 moreh-smi 명령을 실행하여 MoAI Accelerator가 잘 표시되는지 확인하시기 바랍니다. 디바이스 이름은 시스템마다 다르게 설정되어 있을 수 있습니다."]},{"l":"MoAI Accelerator 확인","p":["이 튜토리얼에서 안내할 Mistral 7B 모델과 같은 sLLM을 학습하기 위해서는 적절한 크기의 MoAI Accelerator를 선택해야 합니다. 먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","수행할 학습에 필요한 구체적인 MoAI Accelerator 설정에 대한 설명은 3. 학습 실행하기 에서 제공하겠습니다."]}],[{"l":"1. Fine-tuning 준비하기","p":["MoAI Platform에서 PyTorch 스크립트 실행 환경을 준비하는 것은 일반적인 GPU 서버에서와 크게 다르지 않습니다."]},{"l":"PyTorch 설치 여부 확인하기","p":["SSH로 컨테이너에 접속한 다음 아래와 같이 실행하여 현재 conda 환경에 PyTorch가 설치되어 있는지 확인합니다.","버전명에는 PyTorch 버전과 이를 실행시키기 위한 MoAI 버전이 함께 표시되어 있습니다. 위 예시의 경우 PyTorch 1.13.1+cu116 버전을 실행하는 MoAI의 24.3.0 버전이 설치되어 있음을 의미합니다.","만약 conda: command not found 메시지가 표시되거나, torch 패키지가 리스트되지 않거나, 혹은 torch 패키지가 존재하더라도 버전명에 “moreh”가 포함되지 않은 경우 (Prepare Fine-tuning on MoAI Platform) 문서에 따라 conda 환경을 생성하십시오."]},{"l":"PyTorch 동작 여부 확인하기","p":["다음과 같이 실행하여 torch 패키지가 정상적으로 import되고 MoAI Accelerator가 인식되는지 확인합니다."]},{"l":"필요 Python 패키지 설치","p":["다음과 같이 실행하여 스크립트 실행에 필요한 서드 파티 Python 패키지들을 미리 설치합니다."]},{"l":"학습 스크립트 다운로드","p":["다음과 같이 실행하여 GitHub 레포지토리에서 학습을 위한 PyTorch 스크립트를 다운로드합니다. 본 튜토리얼에서는 tutorial 디렉토리 안에 있는 train_baichuan2_13b.py 스크립트를 사용할 것입니다."]},{"l":"학습 데이터 다운로드","p":["이번 튜토리얼에서 사용할 학습 데이터를 다운로드 받기 위해 dataset 디렉토리 안에 있는 prepare_baichuan_dataset.py 스크립트를 사용하겠습니다. 코드를 실행하면 e-commerce 데이터인 Bitext-custormer-support-llm-chatbot 데이터를 다운로드 받고 정제한 후 baichuan_dataset.pt 파일로 저장합니다.","전처리가 진행된 데이터셋은 baichuan_dataset.pt 로 저장됩니다.","저장된 데이터셋은 코드상에서 다음과 같이 로드하여 사용할 수 있습니다."]}],[{"l":"2. Moreh의 학습 코드 톺아보기","p":["학습 데이터를 모두 준비하셨다면 다음으로는 실제 fine-tuning 과정을 실행할 train_baichuan2_13b.py 스크립트의 내용을 살펴 보겠습니다. 이번 단계에서는 MoAI Platform은 pytorch와의 완전한 호환성으로 학습 코드가 일반적인 nvidia gpu를 위한 pytorch 코드와 100% 동일하다는 것을 확인하실 수 있습니다. 또한 이를 넘어서 기존의 복잡한 병렬화 기법들을 MoAI Platform에서는 얼마나 효율적으로 구현할 수 있는지도 확인하실 수 있습니다.","우선 제공된 스크립트를 그대로 사용하여 튜토리얼을 끝까지 진행해 보시기를 권장합니다. 이후 스크립트를 원하는 대로 수정하셔서 Baichuan 모델을 다른 방식으로 fine-tuning하는 것도 얼마든지 가능합니다. 필요하시다면 Moreh에서 제공하는 MoAI Platform 응용 가이드( LLM Fine-tuning 파라미터 가이드)를 참고하십시오."]},{"l":"Training Code","p":["모든 코드는 일반적인 pytorch 사용 경험과 완벽하게 동일합니다.","먼저, transformers 라이브러리에서 필요한 모듈을 불러옵니다.","HuggingFace에 공개된 모델 config와 체크포인트를 불러옵니다.","Fine tuning 준비하기 단계에서 저장한 전처리된 데이터셋을 불러와 데이터로더를 정의합니다.","이후 학습도 일반적인 Pytorch를 사용하여 모델 학습과 동일하게 진행됩니다.","위와 같이 MoAI Platform에서는 기존에 사용하시던 PyTorch 스크립트를 수정 없이 동일하게 사용하실 수 있습니다."]},{"l":"About Advanced Parallelism","p":["본 튜토리얼에 사용되는 학습 스크립트에는 아래와 같은 코드가 추가로 한 줄 존재합니다. 이는 MoAI Platform에서 제공하는 자동 병렬화 기능을 수행하는 코드입니다.","본 튜토리얼에서 사용하는 Baichuan2 13B 와 같은 거대한 언어 모델의 경우 필연적으로 여러 개의 GPU를 사용하여 학습시켜야만 합니다. 이때, MoAI Platform이 아닌 다른 프레임워크를 사용할 경우, Data Parallel, Pipeline Parallel, Tensor Parallel과 같은 병렬화 기법을 도입하여 학습을 수행해야 합니다.","예를 들어, 사용자가 일반적인 pytorch 코드에서 DDP를 적용하고 싶다면, 다음과 같은 코드 스니펫이 추가되어야 합니다. ( https://pytorch.org/tutorials/intermediate/ddp_tutorial.html)","이와 같은 기본적인 세팅 이외에도 유저는 학습 스크립트 작성 과정에서 multi processing 환경에서의 Python 코드의 동작에 대해 이해하고 있어야 하며, 특히 multi node 세팅에서는 학습에 사용되는 노드들에 대한 환경 구성 작업이 추가적으로 들어가야 합니다. 게다가 모델의 종류, 크기, 데이터셋 등을 고려한 최적의 병렬화 방법을 찾기 위해서는 매우 많은 시간이 소요됩니다.","반면, MoAI Platform의 AP기능은 유저가 직접 이러한 추가적인 병렬화 기법을 적용할 필요 없이, 단지 학습 스크립트에 다음과 같은 코드 한 줄을 추가하는 것 만으로도 최적화된 병렬화 학습을 진행할 수 있습니다.","이렇듯 다른 프레임워크에서는 경험할 수 없는 병렬화의 최적화 및 자동화 기능인 MoAI Platform만의 Advanced Parallelization(AP)을 통해 최적의 분산 병렬처리 를 경험해보시기 바랍니다. AP기능을 이용하면 일반적으로 대규모 모델 훈련시 필요한 Pipeline Parallelism, Tensor Parallelism의 최적 매개변수와 환경변수 조합을 아주 간단한 코드 한 줄 을 통해 확보할 수 있습니다."]}],[{"l":"3. 학습 실행하기","p":["이제 실제로 fine tuning을 실행해 보겠습니다."]},{"l":"가속기 Flavor 설정","p":["(모든 문서에 추가될 그림 생성 예정)","4xLarge.2048GB 로 잘 변경된 것을 확인할 수 있습니다.","AMD MI210 GPU 32개 사용","AMD MI250 GPU 16개 사용","AMD MI300X GPU 8개 사용","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보 문서를 참고하십시오.","LLM Fine-tuning 파라미터 가이드","MoAI Platform에서는 사용자에게 물리 GPU가 노출되지 않습니다. 대신 PyTorch에서 사용 가능한 가상의 MoAI Accelerator가 제공됩니다. 가속기의 flavor를 설정함으로써 실제로 PyTorch에서 물리 GPU를 얼마나 활용할지를 결정할 수 있습니다. 선택한 가속기 Flavor에 따라 총 학습 시간과 GPU 사용 비용이 달라지므로 사용자의 학습 상황에 따른 판단이 필요합니다. 사용자의 학습 목표에 맞는 가속기 Flavor를 선택하기 위해 다음 문서를 참고하세요.","moreh-switch-model 툴을 사용하여 현재 시스템에서 사용 가능한 가속기 flavor 리스트를 확인할 수 있습니다. 원활한 모델 학습을 위해 moreh-switch-model 명령어를 이용해 더 큰 메모리의 MoAI Accelerator로 변경할 수 있습니다.","Moreh의 체험판 컨테이너 사용 시: 선택","q 를 입력해 변경을 완료합니다.","따라서 처음 설정되어 있던 flavor를 로 전환한 다음 moreh-smi 명령을 사용하여 정상적으로 반영되었는지 확인하겠습니다.","먼저 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","변경 사항이 잘 반영되었는지 확인하기 위해 다시 moreh-smi 명령어를 이용해 현재 사용중인 MoAI Accelerator를 확인합니다.","사용을 위해 8을 입력합니다.","앞서 ‘ Baichuan2 Finetuning’ 문서에서 MoAI Accelerator를 확인했던 것을 기억하시나요? 이제 본격적인 학습 실행을 위해 필요한 가속기를 설정해보겠습니다.","여기서 번호를 입력하여 다른 flavor로 전환할 수 있습니다.","이번 튜토리얼에서는 2048GB 크기의 MoAI Accelerator를 이용하겠습니다.","튜토리얼을 계속 진행하기 위해 인프라 제공자에게 각 flavor에 대응되는 GPU 종류 및 개수를 문의하십시오. 다음 중 하나에 해당하는 flavor를 선택하여 계속 진행하십시오.","현재 사용중인 MoAI Accelerator의 메모리 크기는 256GB입니다."]},{"l":"학습 실행","p":["주어진 train_baichuan2_13b.py 스크립트를 실행합니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력 될 것입니다. 로그를 통해 최적의 병렬화 설정을 찾는 Advanced Parallelism 기능이 정상 동작하는 것을 확인할 수 있습니다. 앞서 살펴 본 PyTorch 스크립트 상에서는 AP 코드 한 줄을 제외한 다른 부분에서 GPU 여러 개를 동시에 사용하기 위한 처리가 전혀 없었음을 참고하십시오.","Loss 값이 다음과 같이 떨어지며 정상 학습이 이루어지는 것을 확인할 수 있습니다.","학습 도중에 출력되는 throughput은 해당 PyTorch 스크립트를 통해 초당 몇 개의 token을 학습하고 있는지를 의미합니다.","AMD MI250 GPU 8개 사용 시: 약 191605 tokens/sec","GPU 종류 및 개수에 따른 대략적인 학습 소요 시간은 다음과 같습니다.","AMD MI250 GPU 8개 사용 시: 약 30분"]},{"l":"학습 중에 가속기 상태 확인","p":["학습 도중에 터미널을 하나 더 띄워서 컨테이너에 접속한 후 moreh-smi 명령을 실행하시면 다음과 같이 MoAI Accelerator의 메모리를 점유하며 학습 스크립트가 실행되는 것을 확인하실 수 있습니다. 실행 로그상에서 초기화 과정이 끝나고 Loss가 출력되는 도중에 확인해 보시기 바랍니다."]}],[{"l":"4. 학습 결과 확인하기","p":["앞 장과 같이 train_baichuan2_13b.py 스크립트를 실행하면 결과 모델이 baichuan_code_generation 디렉토리에 저장됩니다. 이는 순수한 PyTorch 모델 파라미터 파일로 MoAI Platform이 아닌 일반 GPU 서버에서도 100% 호환됩니다.","미리 다운로드한 GitHub 레포지토리의 tutorial 디렉토리 아래에 있는 inference_baichuan.py 스크립트로 학습된 모델을 테스트해 볼 수 있습니다.","코드를 실행합니다.","출력값을 확인해보면 모델이 프롬프트에 대한 적절한 답변 생성한 것을 확인할 수 있습니다."]}],[{"l":"5. GPU 개수 변경하기","p":["앞과 동일한 fine-tuning 작업을 GPU 개수를 바꾸어 다시 실행해 보겠습니다. MoAI Platform은 GPU 자원을 단일 가속기로 추상화하여 제공하며 자동으로 병렬 처리를 수행합니다. 따라서 GPU 개수를 변경하더라도 PyTorch 스크립트는 전혀 고칠 필요가 없습니다."]},{"l":"가속기 Flavor 변경","p":["moreh-switch-model 툴을 사용하여 가속기 flavor를 전환합니다. 가속기 변경 방법은 3. 학습 실행하기 문서를 한번 더 참고해주시기 바랍니다.","인프라 제공자에게 문의하여 다음 중 하나를 선택한 다음 계속 진행하십시오. ( KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보)","AMD MI250 GPU 32개 사용","Moreh의 체험판 컨테이너 사용 시: 선택","KT Cloud의 Hyperscale AI Computing 사용 시: 선택","AMD MI210 GPU 64개 사용","AMD MI300X GPU 16개 사용"]},{"l":"학습 실행","p":["다시 train_baichuan2_13b.py 스크립트를 실행합니다.","사용 가능한 GPU 메모리가 2배가 늘었기 때문에, 배치 사이즈 또한 2048로 변경하여 실행시켜 보겠습니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력될 것입니다.","앞서 GPU 개수가 절반이었을 때 실행한 결과와 비교해 동일하게 학습이 이루어지며 throughput이 향상되었음을 확인할 수 있습니다.","AMD MI250 GPU 16 → 32개 사용 시: 약 198,000 tokens/sec → 370,000 tokens/sec"]}],[{"l":"6. 마무리","p":["지금까지 MoAI Platform에서 HuggingFace에 공개된 Baichuan2 13B 모델을 fine-tuning하는 과정을 살펴 보았습니다. MoAI Platform을 사용하면 기존의 학습 코드를 그대로 사용하면서 PyTorch 기반 오픈 소스 LLM 모델을 쉽게 GPU 클러스터에서 fine-tuning할 수 있습니다. 또한, MoAI 플랫폼을 사용한다면 여러분이 필요한 GPU 수를 코드 변경 없이 손쉽게 설정할 수 있습니다. 여러분만의 데이터로 새로운 모델을 빠르고 쉽게 개발해 보세요."]},{"l":"더 알아보기","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Llama2 Fine-tuning","Mistral Fine-tuning","GPT Fine-tuning","Qwen Fine-tuning"]}],[{"l":"Supported Documents","p":["Moreh Toolkit Guide","Prepare Fine-tuning on MoAI Platform","Advanced Parallelization (AP)","LLM Fine-tuning Parameter guide","KT Hyperscale AI Computing (HAC) AI Accelerator Information"]}],[{"l":"MoAI Platform의 toolkit 사용하기"},{"l":"Moreh Toolkit의 기능","p":["Moreh Toolkit은 MoAI Platform 상에서 MoAI Accelerator를 관리하거나 모니터링할 때 유용한 command line 도구입니다. 사용자는 Moreh Toolkit 는 현재 3가지의 command line 명령어를 제공하고 있으며 ( moreh-smi, moreh-switch-model, update-moreh), 이를 사용하여 MoAI Accelerator 를 관리 및 변경할 수 있고, 또한 현재 유저의 환경에 설치된 모레 솔루션을 손쉽게 업데이트할 수 있습니다.","Moreh Toolkit의 주요 기능은 다음과 같습니다:","MoAI Accelerator의 메모리 사용량 및 프로세스 현황을 실시간으로 확인하고 모니터링","AI 가속기를 변경하고 프로세스를 실행하여 최적의 성능을 얻고자 할 때","Moreh 솔루션을 최신 버전으로 업데이트하거나 롤백해야 할 때"]},{"l":"moreh-smi","p":["moreh-smi 는 사용자가 MoAI Accelerator를 관리하고 모니터링할 수 있는 명령어 입니다. MoAI Platform Pytorch가 설치된 conda 환경에서 다음과 같이 실행할 수 있습니다.","현재 MoAI Accelerator 를 사용하여 학습을 진행하고 있다면, 다른 터미널 세션을 활용하여 moreh-smi 을 실행할 경우 실행중인 프로세스 정보를 다음과 같은 화면을 보실 수 있습니다. 또한 moreh-smi 을 활용하면 현재 본인의 Job ID 를 확인할 수 있으므로, MoAI Platform 에서 학습 또는 추론에 문제가 생길 경우 해당 Job ID 와 함께 고객지원을 문의하면 더 빠르게 응답을 받으실 수 있습니다."]},{"l":"MoAI Accelerator 의 Multi Accelerator 기능 활용하기","p":["유저가 별도의 세팅을 하지 않을 경우에는 기본적으로 하나의 SSH 환경에 하나의 MoAI Accelerator 만 존재할 것입니다. 기본적으로 MoAI Accelerator 한 개로는 하나의 프로세스만 실행할 수 있기 때문에, 기본 세팅으로는 하나의 SSH 환경에서 하나의 프로세스 실행만 가능합니다.","하지만 경우에 따라서는 하나의 SSH 환경에서도 여러 개 MoAI Accelerator 를 활용하여 동시에 여러 개의 프로세스로 학습을 실행하고 싶은 경우도 있을 겁니다. (예: 동일한 소스코드이나 하이퍼 파라미터를 변경해서 여러 개의 학습 실험을 동시에 수행하고 싶은 경우) 이런 경우 moreh-smi 에서 하나의 토큰 내에 여러 개의 MoAI Accelerator 을 생성하면, 동시에 여러개의 프로세스를 수행할 수 있습니다.","다음 예제를 통해 AI 가속기를 추가, 변경 삭제해보겠습니다."]},{"l":"1. AI 가속기 추가하기","p":["먼저 AI 가속기를 추가해보겠습니다. 2개 이상의 AI 가속기를 사용하기 위해서 moreh-smi device --add 커멘드를 입력하면 아래와 같은 인터페이스가 나타납니다.","1~ 13 중 사용할 모델에 해당하는 정수를 입력하면 “Create device success.” 메시지와 함께 입력된 디바이스 번호에 해당하는 AI 가속기가 생성됩니다. 하나의 VM 내에서는 최대 5개 AI가속기를 생성할 수 있습니다.","아래 예제에서는 10번 8xLarge.4096GB AI 가속기를 추가해 보겠습니다."]},{"l":"2. AI 가속기 기본값 변경하기","p":["moreh-smi device --switch {Device_ID} 는 기본값으로 설정된 MoAI Accelerator 를 변경할 수 있는 명령어 입니다.","다음과 같이 사용할 수 있습니다 :","현재 기본값으로 설정된 MoAI Accelerator가 1번 가속기로 변경된 것을 확인할 수 있습니다."]},{"l":"3. AI 가속기 변경하기","p":["moreh-switch-model 는 현재 설정된 MoAI Accelerator 의 flavor(가속기 사양)를 변경할 수 있는 툴입니다. MoAI Accelerator 의 flavor를 변경함으로써 GPU 메모리를 얼만큼 사용할 것인지 결정합니다.","다음과 같이 사용할 수 있습니다 :","예를 들어, moreh-smi 명령어의 결과가 다음과 같다면 이는 “현재 기본값으로 설정된 MoAI Accelerator는 0번 가속기이며 이 MoAI Accelerator의 유형은 Small.64GB 모델”이라는 의미입니다.","moreh-switch-model 명령어를 사용하면 아래와 같은 입력창이 나타납니다.","1~ 13 중 사용할 모델에 해당하는 정수(디바이스 번호)를 입력하면 “The MoAI Platform AI Accelerator model is successfully switched to .” 메시지와 함께 입력된 디바이스 번호에 해당하는 MoAI Accelerator로 변경됩니다.","지금은 3번 Large.256GB 로 MoAI Accelerator를 변경해보겠습니다.","변경을 계속하거나 q 또는 Q 를 통해 MoAI Accelerator 변경을 종료할 수 있습니다.","변경이 완료된 후 다시 moreh-smi 를 사용하여 확인한 결과는 다음과 같습니다.","0번 Small.64GB 모델 유형의 MoAI Accelerator가 Large.256GB 모델 유형으로 변경된 것을 확인할 수 있습니다."]},{"l":"3. AI 가속기 삭제하기","p":["이번에는 생성된 디바이스를 moreh-smi device --rm {Device_ID} 커멘드로 특정 디바이스 ID에 해당하는 가속기를 삭제해보겠습니다.","위와 같은 커멘드를 입력해서 Device ID가 1인 AI 가속기인 8xLarge.4096GB 가 삭제되었습니다. 확인을 위해 다시 moreh-smi를 실행하면 해당 디바이스가 삭제된 것을 확인할 수 있습니다."]},{"l":"그 외의 다양한 옵션 활용하기","p":["moreh-smi 는 이외에도 다양한 다양한 옵션을 제공합니다. 다음과 같이 --help 옵션을 활용하면 어떠한 옵션이 제공되는지 확인할 수 있습니다.","(위 내용들이 잘 정리가 되었다면, 굳이 아래 중에 1, 5, 6, 7, 8 은 언급하지 않아도 될 것 같습니다)","moreh-smi- MoAI Accelerator 활용 상태 모니터링하기","moreh-smi -p- MoAI Accelerator 상세 하드웨어 상태 모니터링하기","moreh-smi -t- MoAI Accelerator 토큰 정보 확인하기","moreh-smi --reset- MoAI Accelerator 프로세스 종료하기","moreh-smi device --list- 추가 가능한 MoAI Accelerator 종류 확인하기","moreh-smi device --add- 새로운 MoAI Accelerator추가하기","moreh-smi device --rm- MoAI Accelerator 삭제하기","moreh-smi device --switch- MoAI Accelerator 디바이스 기본값 변경하기"]},{"l":"update-moreh","p":["update-moreh 는 conda 환경을 새롭게 생성하고 그 위에 모레 솔루션을 설치하거나, 이미 conda 환경에 설치된 모레 솔루션의 버전을 업데이트할 수 있는 명령어입니다. 다음과 같은 상황에서 update-moreh 를 사용할 수 있습니다.","새롭게 conda 환경을 생성한 경우 아직 모레 솔루션에 필요한 Python 패키지 설치가 필요합니다. 이 경우에는 update-moreh 명령어를 통해서 최신 버전의 모레 솔루션을 간단하게 설치할 수 있습니다.","이미 모레 솔루션이 설치된 conda 환경 내에서도 최신 버전의 모레 솔루션을 사용하고자 할 때, update-moreh 명령어를 단독으로 사용하여 현재 사용 중인 모레 솔루션을 최신버전으로 업데이트 할 수 있습니다.","필요에 따라 특정 버전의 모레 솔루션을 설치해야 할 경우가 있습니다. 이 경우에는 --target 옵션을 사용하여 사용자가 설치하고 싶은 특정 버전을 지정할 수 있습니다.","conda 환경에서 다른 패키지간의 의존성 충돌이 발생하는 문제 등으로 인해 모레 솔루션이 정상적으로 동작하지 않는 경우, conda 환경을 재구성을 해야 할 수 있습니다. 이러한 경우에도 conda 환경 내의 모레 솔루션 복구를 위하여 update-moreh 를 사용할 수 있습니다. 후자의 경우 --force 옵션을 사용하여 환경 재구성이 가능합니다. (—-target 옵션과 같이 사용 가능)"]},{"l":"moreh-switch-model","p":["moreh-switch-model 는 현재 기본값으로 설정된 MoAI Accelerator 의 flavor를 변경할 수 있는 툴입니다. MoAI Accelerator 의 flavor를 변경함으로써 GPU 메모리를 얼만큼 사용할 것인지 결정합니다.","다음과 같이 사용할 수 있습니다 :","예를 들어, moreh-smi 명령어의 결과가 다음과 같다면 이는 “현재 기본값으로 설정된 MoAI Accelerator는 0번 가속기이며 이 MoAI Accelerator의 유형은 Small.64GB 모델”이라는 의미입니다.","이를 다른 유형의 모델로 변경하고자 할 때, moreh-switch-model 을 사용할 수 있습니다.","moreh-switch-model 명령어를 사용하면 아래와 같은 입력창이 나타납니다.","1~ 13 중 사용할 모델에 해당하는 정수(디바이스 번호)를 입력하면 “The MoAI Platform AI Accelerator model is successfully switched to .” 메시지와 함께 입력된 디바이스 번호에 해당하는 MoAI Accelerator로 변경됩니다.","지금은 3번 Large.256GB 로 MoAI Accelerator를 변경해보겠습니다.","변경을 계속하거나 q 또는 Q 를 통해 MoAI Accelerator 변경을 종료할 수 있습니다.","변경이 완료된 후 다시 moreh-smi 를 사용하여 확인한 결과는 다음과 같습니다.","0번 Small.64GB 모델 유형의 MoAI Accelerator가 Large.256GB 모델 유형으로 변경된 것을 확인할 수 있습니다."]}],[{"l":"Prepare Fine-tuning on MoAI Platform","p":["MoAI Platform은 다양한 GPU로 구성될 수 있지만, 동일한 인터페이스(CLI)를 통해 사용자에게 일관된 경험을 제공합니다. 모든 사용자가 같은 방식으로 시스템에 접근하여 플랫폼을 사용할 수 있기 때문에 보다 효율적이며 직관적입니다.","MoAI Platform 또한 일반적인 AI 학습 환경과 유사하게 Python 기반의 프로그래밍을 지원합니다. 이에 따라 본 문서에서는 AI 학습을 위한 표준 환경 구성으로서 conda 가상 환경의 설정과 사용 방법을 중심으로 설명합니다."]},{"l":"conda 환경 설정하기","p":["훈련을 시작하기 위해 먼저 conda 환경을 생성합니다.","my-env 에는 사용자가 사용할 환경 이름을 입력합니다.","conda 환경을 활성화합니다.","Fine-tuning에 필요한 library와 package를 설치합니다.","moreh-smi 명령어를 입력해 설치된 Moreh 솔루션의 버전과 사용중인 MoAI Accelerator 정보를 확인할 수 있습니다. 현재 사용중인 MoAI Accelerator는 4xLarge.2048GB 입니다. MoAI Accelerator에 대한 자세한 정보는 MoAI Accelerator 사양을 참고해주세요."]},{"i":"moai-accelerator-선택-변경하기","l":"MoAI Accelerator 선택, 변경하기","p":["sLLM 파인튜닝시 학습 데이터 배치 사이즈에 따른 적절한 MoAI Accelerator 모델을 moreh toolkit을 사용하여 선택, 변경할 수 있습니다. 참고로, sLLM(약 7B~ 13B 모델)을 fine-tuning 하기 위해 일반적으로 사용되는 데이터셋의 크기는 약 40GB의 텍스트 데이터셋입니다.","먼저, moreh-smi 를 사용하여 현재 사용하고 있는 MoAI Accelerator 모델을 확인해 보겠습니다.","현재 사용하고 있는 MoAI Accelerator 모델에서 제공되는 메모리는 64GB입니다. moreh-switch-model 을 사용하여 더 큰 메모리를 제공하는 MoAI Accelerator 모델로 변경해 보겠습니다.","4xLarge.2048GB 모델로 변경하기 위해 8 을 입력합니다.","q 를 입력하여 변경을 완료합니다.","다시 moreh-smi 를 사용하여 변경된 상태를 확인하면 사용하고 있는 MoAI Accelerator 모델이 4xLarge.2048GB 모델로 변경된 것을 확인할 수 있습니다.","각 모델별로 MoAI Platform에서 권장하는 Fine-tuning 시 최적의 파라미터는 LLM Fine-tuning 파라미터 가이드 를 참고하시기 바랍니다.","moreh-smi, moreh-switch-model 를 비롯한 moreh toolkit의 구체적인 사용 방법에 대해서는 MoAI Platform의 toolkit 사용하기 를 참고하시기 바랍니다."]}],[{"i":"advanced-parallelization-ap","l":"Advanced Parallelization (AP)"},{"i":"moai-platform의-자동병렬화-기능--advanced-parallelization-ap","l":"MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)"},{"i":"병렬화가-반드시-필요한-이유는-무엇일까요","l":"병렬화가 반드시 필요한 이유는 무엇일까요?","p":["일반적으로 많이 사용되는 Llama2 13B 모델의 크기를 Bytes 단위로 계산해봅시다.","130억개의 파라미터를 가진 Llama2 13B는 FP16 데이터 형을 기준으로 13B * 2 bytes 크기입니다. 이는 약 24.2GB입니다. AdamW optimizer는 13B * 2 * 2로 약 48.4GB입니다. 모델을 로드하는 데에만 최소 72.6GB가 필요하며 Gradient에 필요한 메모리 약 24.2GB 등 모델 로드 이외에 +\\alpha 의 메모리가 필요합니다.","MoAI Platform은 가상화 된 GPU 하나를 제공하지만, 이는 실제로 여러 GPU에 모델을 복사하고 batch samples를 균등하게 분할하여 학습시키는 DDP 방식으로 기본 설정되어 동작합니다. 따라서 1 device chip의 VRAM인 64GB가 넘는 데이터를 로드할 수 없습니다.","따라서 모델을 병렬화하여 여러 GPU에 로드하는 기법이 필요합니다."]},{"i":"advanced-parallelization이란","l":"Advanced Parallelization이란?","p":["Advanced Parallelization(이하 AP)은 MoAI Platform에서 제공하는 최적화된 분산 병렬처리 기능입니다. 일반적으로 ML 엔지니어라면 모델 병렬화를 ‘최적화’하기 위해 수 많은 경험적 시행착오를 겪곤합니다. (예를 들어, 모델의 stages 개수, micro batches 개수 등) 하지만 MoAI Platform을 사용한다면 다른 프레임워크에서는 경험할 수 없는 특별한 AP 기능을 활용할 수 있어 최적화된 병렬화에 소요되는 시간과 노력을 획기적으로 줄일 수 있습니다.","Moreh의 AP 기능은 기존 최적화 과정을 자동화 함으로써, 최적의 병렬화 환경 변수 조합을 신속하게 결정합니다. 따라서 대규모 모델 훈련시 적용하는 효율적인 Pipeline Parallelism, Tensor Parallelism의 최적 매개변수와 환경 변수 조합을 간단히 얻을 수 있습니다."]}],[{"i":"advanced-parallelism-ap-기능-사용하기","l":"Advanced Parallelism (AP) 기능 사용하기","p":["기본적으로 AP는 노드 단위로 병렬화를 진행합니다. 따라서 AP를 사용하기 위해서는 multi gpu 환경이어야 합니다. 아래 가이드를 따라 AP 기능을 사용하기에 앞서 사용자가 현재 사용하는 가속기 정보를 한번 더 점검해주시기 바랍니다. 가속기 사이즈에 대한 세부 정보는 KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보 참고해주시기 바랍니다."]},{"l":"AP 기능 적용 방법","p":["AP 기능은 두가지 방식으로 적용할 수 있습니다.","코드 한줄 추가하기","실행 코드에 다음 한줄을 추가하여 AP 기능을 킬 수 있습니다. (이를 주석처리하면 끌 수 있습니다.)","환경 변수로 입력하기","다음과 같이 터미널 세션의 환경변수로 AP 기능을 킬 수 있습니다. ( 0으로 설정하면 끌 수 있습니다.)"]},{"l":"사용 예시 살펴보기","p":["-","1024","13,015,864,320","4xlarge","64","batch size","num params","Pytorch 환경 설정이 되었다면, Github 레포지토리에서 학습을 위한 코드를 가져옵니다.","quickstart 레포지토리를 클론하여 quickstart/ap-example 디렉토리를 확인해보시면 Moreh에서 미리 준비한 AP기능 test를 위한 text_summarization_for_ap.py 를 확인하실 수 있습니다. 이 코드를 기반으로 AP 기능을 적용해봅시다.","sda","sequence length","text_summarization_for_ap.py(전체코드 제공)","먼저 AP를 적용시키는 부분이 어디인지 python 프로그램에서 확인해보시죠.","사용자가 2대 이상의 노드를 사용하는 환경이 준비 되었다면 이제 AP 기능을 사용하기 위한 학습 코드를 만들어 보겠습니다. 이 가이드에서는 Llama2 모델을 활용하여 코드를 세팅합니다. 참고로, Llama2 모델은 커뮤니티 라이센스 동의와 Hugging Face 토큰 정보가 필요합니다. 1. Fine-tuning 준비하기 를 참고하여 학습 코드를 준비해주세요.","테스트를 위한 학습 구성은 다음과 같습니다. 이를 토대로 테스트를 진행하겠습니다.","학습 코드가 준비되었다면, MoAI Platform에서 학습을 실행하기 전 아래와 같이 pytorch 환경을 설정합니다. 아래 예시의 경우 PyTorch 1.13.1+cu116 버전을 실행하는 MoAI의 24.2.0 버전이 설치되어 있음을 의미합니다. 자세한 설명은 1. Fine-tuning 준비하기 튜토리얼을 참고해주시기 바랍니다."]},{"l":"AP 기능 ON","p":["프로그램의 main 함수 시작 지점에 AP 기능을 켜는 line이 있습니다. 다음과 같이 AP를 적용한 후 학습을 실행합니다.","학습이 종료되면 다음과 같은 로그를 확인할 수 있습니다.","이처럼 단 한 줄의 AP 기능 프로그램을 추가하여 복잡한 분산 병렬처리가 수행되어 학습이 진행된 것을 확인할 수 있습니다. AP 기능을 적용하여 손쉬운 병렬화가 가능했는데요, 만약 사용자가 AP 기능을 사용하지 않았을 때는 어떤 경험을 하게 될까요?"]},{"l":"AP 기능 OFF","p":["이를 확인할 수 있도록 AP를 켜지 않았을 때의 형상을 보여 드리겠습니다. 다시 python 프로그램의 main 함수 시작 지점에 AP 기능을 켜는 line을 주석처리하여 AP 기능을 끄겠습니다.","그 다음 학습을 진행합니다.","학습이 종료되면 다음과 같은 로그를 확인할 수 있습니다.","위 로그에서 RuntimeError: Error Code 4: OUT_OF_MEMORY 라는 메시지를 볼 수 있는데, 이것이 바로 앞서 말씀드린 1 device chip의 VRAM인 64GB가 넘는 데이터를 로드 할 수 없기 때문에 발생하는 OOM 에러입니다.","MoAI Platform 이 아닌 다른 프레임워크를 사용한다면 이런 불편함을 겪어야 합니다. 그러나 MoAI Platform을 사용하는 사용자라면 별도 병렬화 최적화를 위해 오랫동안 계산하며 고민하는 시간을 들이지 않고 AP 기능 한줄을 적용하여 골치아픈 OOM 문제를 해결할 수 있습니다. 정말 편리한 기능이죠?"]}],[{"l":"LLM Fine-tuning parameter guide","p":["1,122,745 MiB","1,138,546 MiB","1,403,047 MiB","1,651,008 MiB","1,680,233 MiB","1,706,797 MiB","1,764,955 MiB","1,767,888 MiB","1,800,656 MiB","1024","109872","11,562","11m","121,013","125,180","128","1292886 MiB","12m","13286","1360m","13m","1403,2189","144,124","1467646 MiB","1489,3","15,890","15,972","154,12123","157,859","16","1600235 MiB","163,839","172395","17m","186,353","191605","194,282","2,146,115 MiB","2,645,347 MiB","2,800,000 MiB","2,845,656 MiB","2048","20m","22m","238,212","24,156","24.2.0","24.3.0","24.5.0","24m","256","25m","26,111","27B","28m","2xlarge","3,460,240 MiB","3013826 MiB","30m","3143781 MiB","3181616 MiB","32","32,371","32,563","34m","35m","36m","376,493","38m","400m","4096","40m","442,982 MiB","47,679","480m","4xlarge","50,782","51,353","512","543816 MiB","56,385","560,835 MiB","560m","58531","586m","59m","62,481","62,582","62,740","626,391 MiB","62m","63,893","638,460 MiB","64","65,565","6841","69,840","720m","749065 MiB","784,485 MiB","790,572 MiB","790454 MiB","7m","8,934","81m","843,375 MiB","858,128 MiB","866,656 MiB","872m","8m","8xlarge","92,623","93,165","962m","99,873","9m","Advanced Parallelism 적용 유무","Baichuan2 13B","batch size","Cerebras GPT 13B","Llama2 13B","Mistral 7B","MoAI Accelerator","MoAI Accelerator 에 명시된 명칭은 사용자가 이용하는 CSP에 따라 다를 수 있습니다.","MoAI Platform version","Qwen1.5 7B","sequence length","throughput","token 갯수","True","vram 사용량","모델명","이 가이드는 MoAI Platform에서 제공하는 최적의 파라미터이며 사용자 학습시 참고 정보로만 사용해주시기 바랍니다.","학습 시간"]}],[{"i":"kt-hyperscale-ai-computing-hac-서비스-가속기-모델-정보","l":"KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보","p":["…","12xLarge.6144GB","12대","1대","24xLarge.12288GB","24대","2xLarge.1024GB","2대","3xLarge.1536GB","3대","48xLarge.24576GB","48대","4xLarge.2048GB","4대","6xLarge.3072GB","6대","8xLarge.4096GB","8대","https://manual.cloud.kt.com/kt/hyperscale-ai-computing-howtouse-cj","KT Cloud 공식 매뉴얼 바로가기","Large.256GB","Medium.128GB","MI250 0.5개","MI250 12개","MI250 16개","MI250 192개","MI250 1개","MI250 24개","MI250 2개","MI250 32개","MI250 48개","MI250 4개","MI250 8개","MI250 96개","Model","Small.64GB","xLarge.512GB","노드 수","실제 물리 GPU","현재 HAC 서비스는 AMD MI250 GPU를 사용해 구동되고 있습니다. 모델/애플리케이션에 따라 성능이 달라질 수 있지만 기본적으로 AMD MI250 하나와 NVIDIA A100 하나에서 동등한 성능이 나온다고 예상하시면 됩니다."]}]]