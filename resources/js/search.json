[[{"l":"MoAI Platform Guide","p":["MoAI(Moreh AI appliance for AI accelerators) Platform is a scalable AI platform that enables easy control of thousands of Graphics Processing Units(GPUs) essential for developing large-scale deep learning models.","Virtual GPU Clusters- Access and utilize virtualized GPU clusters to scale your computational resources seamlessly.","Fine-Tuning- Fine-tune with a few commands and deploy your fine-tuned model for inference.","Advanced Parallelism- Employ advanced parallelism techniques effortlessly to optimize model training."]},{"l":"Getting Started","p":["Get started with fine-tuning MoAI Platform Beginner's Guide for Finetuning","AP Guide Advanced Parallelization (AP) Feature Instructions","Moreh Toolkit Guide Command Line Usage","Support FAQ and Troubleshooting"]},{"l":"MoAI Documentation for Developers","p":["Products","Moreh Model Hub","Platform Cloud Service","Tutorials","Llama2 Fine-tuning","Mistral Fine-tuning","GPT Fine-tuning","Qwen Fine-tuning","Baichuan2 Fine-tuning","Supported Documents","LLM Paraemter Guide","KT HAC Models Information","Prepare Fine-tuning on MoAI Platform"]}],[{"l":"MoAI Platform Overview"},{"i":"what-is-moai-platform","l":"What is MoAI Platform?","p":["MoAI(Moreh AI appliance for AI accelerators) Platform is a scalable AI platform that enables easy control of thousands of Graphics Processing Units(GPUs) essential for developing large-scale deep learning models."]},{"l":"Core Technologies of MoAI Platform","p":["As deep learning models evolve, they become increasingly complex and require substantial computational resources, with parameters expanding from billions to trillions. Developing large-scale models involves managing and processing an immense number of parameters, which is very challenging and time-consuming.","The MoAI Platform's automatic parallelization addresses these challenges by simultaneously processing multiple tasks, determining the optimal calculation method for large models. This allows users to focus solely on their core AI challenges, regardless of their application scale or processor type. Furthermore, it efficiently utilizes GPU computational resources at a reasonable cost by allocating them only during calculation execution.","Various Accelerators, Multi-GPU Support","GPU/NPU Virtualization","AI Compiler","Dynamic GPU Allocation"]},{"i":"1various-accelerators-multi-gpu-support","l":"1.Various Accelerators, Multi-GPU Support","p":["MoAI Platform supports various accelerators capable of executing various types of operations regardless of types of GPUs.","Users can utilize different accelerators like Intel, AMD, and others alongside NVIDIA without needing to modify their code for deep learning development and model training.","This compatibility allows for flexible development and training of deep learning models, accommodating multiple and diverse types of GPUs."]},{"i":"2-gpunpu-virtualization","l":"2. GPU/NPU Virtualization","p":["The MoAI Platform's virtualization feature enables thousands of GPUs or NPUs to function as a single, more powerful GPU device.","This unique approach suggests that instead of managing a lot of individual units, users can handle this collective resource as single entity, considerably simplifying complex tasks.","It simplifies the process of modeling and optimization, providing users with a seamless and efficient experience.","By abstracting the complexity of utilizing multiple GPUs or NPUs, it enables easier management and deployment of resources for enhanced performance in deep learning tasks."]},{"l":"3. AI Compiler","p":["In the era of AI, training and inference of large-scale models such as LLM(Large language Model) and LMM(Large Multimodal Model) require significantly large GPU clusters and effective GPU parallelization.","Currently, most AI frameworks used with NVIDIA require manual parallelization by AI engineers depending on the size and complexity of the model and the available GPU size/cluster. This setup process is time-consuming, often taking weeks to complete.","The MoAI Platform offers automatic parallelization can be achieved through a Moreh AI compiler that finds out the optical way to use GPU resources based on the the specific AI model and the size of GPU cluster.","This can significantly shorten the setup and deployment time for AI models, from several weeks, as with NVIDIA, to only 2-3 days."]},{"l":"4. Dynamic GPU Allocation","p":["On the MoAI platform, AI engineers can begin deep learning training with exactly the amount of GPU resources as needed.","GPU resources are only allocated during computation execution, allowing for efficient use of GPU resources. This not only reduces software development cost, but also saves time for development and deployment.","Copyright © 2024 Moreh Corporation"]}],[{"l":"Tutorials","p":["This guide is for anyone who wants to fine-tune powerful language models such as Llama2, Mistral, and etc for their own projects. We will walk through the steps to finetune these large language models (LLMs) with MoAI Platform."]},{"l":"Fine-tuning Tutorials","p":["Llama2","Mistral","GPT","Qwen","Baichuan2","Fine-tuning in machine learning involves adjusting a pre-trained machine learning model's weight on new data to enhance task-specific performance. Essentially, when you want to apply an AI model to a new task, you take an existing model and optimize it with new datasets. This allows you to customize the model to meet your specific needs and domain requirements.","Typically, fine-tuning a pre-trained model involves a model with a large number of parameters designed for general-purpose use, and effectively fine-tuning such a large model requires hundreds to thousands of examples.","With the MoAI Platform, you can easily apply optimized parallelization techniques that consider the GPU's memory size, significantly reducing the time and effort needed before starting training.","What you will learn here:","How to find and prep datasets","Turning datasets into ChatML format for training","Choosing the right training settings"]}],[{"l":"Llama2 Fine-tuning","p":["This tutorial introduces an example of fine-tuning the open-source Llama2 13B model on the MoAI Platform. Through this tutorial, you'll learn how to leverage the AMD GPU cluster using the MoAI Platform and explore the benefits of performance and automatic parallelization."]},{"l":"Overview","p":["The Llama2 model, released by Meta in July 2023, is an open-source model based on the Decoder-only Transformer. It follows the structure of the existing Llama model but has been trained with 40% more data to understand more diverse and complex information.","Llama2 excels particularly in language understanding and generation tasks, achieving state-of-the-art performance in various natural language processing tasks. This model supports multilingual capabilities, enabling processing of text in various languages worldwide, and is publicly accessible for research and development purposes.","In this tutorial, we will fine-tune the Llama2 model on the MoAI Platform using the CNN Daily Mail dataset focus on summarization task. Summarization is one of the natural language processing techniques, where the task is to unravel long, complex text and deliver precise summaries."]},{"l":"Before You Start","p":["Be sure to acquire a container or virtual machine on the MoAI Platform from your infrastructure provider and familiarize yourself with connecting to it via SSH. For example, you can sign up for the following public cloud service built on the MoAI Platform:","KT Cloud's Hyperscale AI Computing ( https://cloud.kt.com/solution/hyperscaleAiComputing/)","If you wish to temporarily allocate trial containers and GPU resources, please contact Moreh.(Moreh 연락처 정보 추가 예정)","After connecting via SSH, run the moreh-smi command to ensure that the MoAI Accelerator is displayed correctly. The device name may vary depending on the system. If you encounter any issues during this process, please contact your infrastructure provider or refer to the troubleshooting guide in the documentation."]},{"l":"Check MoAI Accelerator","p":["To train models like the Llama2 model outlined in this tutorial, you need to select an appropriate size MoAI Accelerator. Start by using the moreh-smi command to check the currently used MoAI Accelerator.","Detailed instructions for selecting the MoAI Accelerator size required for the training will be provided in 3. 학습 실행하기"]}],[{"l":"1. Prepare Fine-tuning","p":["Preparing the PyTorch script execution environment on the MoAI Platform is similar to doing so on a typical GPU server."]},{"l":"Checking PyTorch Installation","p":["After connecting to the container via SSH, run the following command to check if PyTorch is installed in the current conda environment:","The version name includes both the PyTorch version and the version of MoAI required to run it. In the example above, it indicates that version 24.2.0 of MoAI, which runs PyTorch version 1.13.1+cu116, is installed.","If you see the message conda: command not found, if the torch package is not listed, or if the torch package exists but does not include \"moreh\" in the version name, please follow the instructions in the (Prepare Fine-tuning on MoAI Platform) document to create a conda environment."]},{"l":"Verifying PyTorch Installation","p":["Run the following command to confirm that the torch package is properly imported and the MoAI Accelerator is recognized. If you encounter any issues throughout this process, please refer to the (troubleshooting TBA)."]},{"l":"Download the Training Script","p":["Execute the following command to download the PyTorch script for training from the GitHub repository. In this tutorial, we will be using the train_llama2.py script located inside the tutorial directory."]},{"l":"Install Required Python Packages","p":["Execute the following command to install third-party Python packages required for script execution:"]},{"l":"Download the Model and Tokenizer","p":["Download the checkpoint and tokenizer for the Llama2-13b-hf model using Hugging Face. Please note that the Llama2 model requires community license agreement and Hugging Face token information. Additionally, since the checkpoint size for the Llama2 13B model is approximately 49GB, it is essential to have at least 50GB of storage space for the checkpoint.","Begin by visiting the following website and providing the required information to proceed with the license agreement.","meta-llama/Llama-2-13b-hf · Hugging Face","Once you've submitted the agreement form, check that the status on the page has updated as follows:","Once the status has changed, you can utilize the download_llama2_13b.py script found in the tutorial directory to download the model checkpoint and tokenizer into the ./llama-2-13b-hf directory.","Make sure to replace user-token with your Hugging Face token.","Check if the model checkpoint and tokenizer have been downloaded."]},{"l":"Download Training Data","p":["To download the training data, we'll use the prepare_llama2_dataset.py script located in the dataset directory. When you run the code, it will download the cnn_dailymail dataset, preprocess it for training, and save it as llama2_dataset.pt file.","You can then load the stored dataset in your code like this:"]}],[{"l":"2. Understanding training code","p":["If you've got all your training data ready, let's dive into running the actual fine-tuning process using the train_llama2.py script. This script is just standard PyTorch code, performing fine-tuning based on the Llama2 13B model from the Hugging Face Transformers library.","We highly recommend proceeding with the tutorial using the provided script as is. Afterward, feel free to customize the script to fine-tune the Llama2 13B model or any other publicly available model in a different manner. If needed, refer to the MoAI Platform application guide ( LLM Fine-tuning 파라미터 가이드) provided by Moreh."]},{"l":"Training Code","p":["All the code used during training is exactly the same as when you're using PyTorch in general.","Import the necessary modules from the transformers library.","Then, load up the model checkpoint and tokenizer you downloaded earlier.","Load your preprocessed dataset, which you prepared during the 1. Prepare fine-tuning step, and define your data loaders.","Training proceeds as usual, just like with any other PyTorch model.","With MoAI Platform, you can seamlessly use your existing PyTorch scripts without any modifications."]},{"l":"About Advanced Parallelism","p":["In the training script used in this tutorial, there is an additional line of code as follows, which executes the top-tier parallelization feature provided by the MoAI Platform:","Training a massive language model like Llama2 13B requires a significant number of GPUs. Therefore, when not using the MoAI Platform, you would need to introduce parallelization techniques such as Data Parallelism, Pipeline Parallelism, and Tensor Parallelism into your training process.","For example, if a user wants to apply DDP in their regular PyTorch code, the following code snippet would need to be added (Reference: https://pytorch.org/tutorials/intermediate/ddp_tutorial.html)","In addition to these basic settings, users need to understand how Python code behaves in a multiprocessing environment during the process of writing training scripts. Especially in multi-node setups, configuring the environment of each node used for training is necessary. Furthermore, finding the optimal parallelization method considering factors such as model type, size, and dataset requires a considerable amount of time.","On the other hand, MoAI Platform's AP feature allows users to proceed with optimized parallelized training with just one line of code added to the training script, without the need for users to apply these additional parallelization techniques themselves.","MoAI Platform's Advanced Parallelization (AP) provides optimization and automation features that are difficult to experience in other frameworks. Through the AP feature, users can experience the best distributed parallel processing. By leveraging AP, users can easily configure the optimal parameters and environment variables for Pipeline Parallelism and Tensor Parallelism required for training large-scale models with just a single line of code."]}],[{"l":"3. Model fine-tuning","p":["Now, we will train the model through the following process."]},{"l":"Setting Accelerator Flavor","p":["(모든 문서에 추가될 그림 생성 예정)","AMD MI210 GPU with 32 units.","AMD MI250 GPU with 16 units:","AMD MI300X GPU with 8 units.","Before continuing with the tutorial, we recommend reaching out to your infrastructure provider to inquire about the types and quantities of GPUs associated with each flavor. Once you have this information, you can choose one of the following flavors to proceed:","Enter 8 to use","Enter q to complete the change.","First, we'll use the moreh-smi command to check the currently used MoAI Accelerator.","In MoAI Platform, physical GPUs are not directly exposed to users. Instead, virtual MoAI Accelerators are provided, which are available for use in PyTorch. By setting the accelerator's flavor, you can determine how much of the physical GPU will be utilized by PyTorch. Since the total training time and GPU usage cost vary depending on the selected accelerator flavor, users should make decisions based on their training scenarios. Refer to the following document to select the accelerator Flavor that aligns with your training objectives.","In this tutorial, we will use a 2048GB-sized MoAI Accelerator.","KT Hyperscale AI Computing (HAC) AI Accelerator Information","LLM Fine-tuning Parameter Guide","Now you can see that it has been successfully changed to .","Please refer to the document above or reach out to your infrastructure provider to inquire about the GPU types and quantities corresponding to each flavor.","Remember when we checked the MoAI Accelerator in the 1. Prepare Fine-tuning? Now let's set up the accelerator needed for learning.","Select when using KT Cloud's Hyperscale AI Computing.","Select when using Moreh's trial container.","The current MoAI Accelerator in use has a memory size of 512GB.","Therefore, after switching from the initially set flavor to , we will use the moreh-smi command to confirm that the change has been successfully applied.","To confirm that the changes have been successfully applied, use the moreh-smi command again to check the currently used MoAI Accelerator.","You can enter the number to switch to a different flavor.","You can utilize the moreh-switch-model command to review the available accelerator flavors on the current system. For seamless model training, consider using the moreh-switch-model command to switch to a MoAI Accelerator with larger memory capacity."]},{"l":"Training Execution","p":["Execute the given train_gpt.py script.","If the training proceeds smoothly, you should see the following logs. By going through this logs, you can verify that the Advanced Parallelism feature, which determines the optimal parallelization settings, is functioning properly. It's worth noting that, apart from the single line of AP code we looked at earlier in the PyTorch script, there is no handling for using multiple GPUs simultaneously in other parts of the script.","You can verify that the training is proceeding smoothly by checking the training logs.","The throughput displayed during training indicates how many tokens are being trained per second through the PyTorch script.","Throughput when using 16 AMD MI250 GPUs: Approximately 35,000 tokens/sec","Here are the approximate training times based on the type and number of GPUs:","Training time when using 16 AMD MI250 GPUs: Approximately 10 hours"]},{"l":"Checking Accelerator Status During Training","p":["During training, open another terminal and connect to the container. Then, execute the moreh-smi command to observe the MoAI Accelerator occupying memory and the training script running. Make sure to check this while the initialization process is completed and the training loss appears in the execution logs."]}],[{"l":"4. Checking Training Results","p":["Upon running the train_llama2.py script as described earlier, the resulting model will be saved in the llama2_summarization directory. This model is a pure PyTorch parameter file and is fully compatible with regular GPU servers, not just the MoAI Platform.","You can test the trained model using the inference_llama2.py script located under the tutorial directory of the pre-downloaded GitHub repository.","For testing, articles related to English Premier League (EPL) match results have been used.","Run the train script.","From the output, you'll notice that Llama2 has appropriately summarized the contents of the prompt."]}],[{"l":"5. Changing the Number of GPUs","p":["Let's rerun the fine-tuning task with a different number of GPUs. MoAI Platform abstracts GPU resources into a single accelerator and automatically performs parallel processing. Therefore, there is no need to modify the PyTorch script even when changing the number of GPUs."]},{"l":"Changing Accelerator type","p":["Switch the accelerator type using the moreh-switch-model tool. For instructions on changing the accelerator, please refer again to the 3. Model fine-tuning.","Please contact your infrastructure provider and choose one of the following options before proceeding. ( KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보)","AMD MI250 GPU with 32 units","When using Moreh's trial container: select","When using KT Cloud's Hyperscale AI Computing: select","AMD MI210 GPU with 64 units","AMD MI300X GPU with 16 units"]},{"l":"Training Parameters","p":["Run the train_llama2.py script again.","Since the GPU memory has doubled, let's increase the batch size from the previous 256 to 512 and run the code again.","If the training proceeds smoothly, you'll see logs similar to the following:","Compared to the previous results obtained when the GPU count was halved, you'll notice that the training is progressing similarly, but with an improved throughput.","When using AMD MI250 GPU 16 → 32 : approximately 35,000 tokens/sec → 74,000 tokens/sec"]}],[{"l":"6. Conclusion","p":["From this tutorial, we have seen how to fine-tune Llama2 13B for text summarization on the MoAI Platform. Open-source LLMs like Llama can be utilized for various natural language processing tasks such as summarization, question answering, and more. With the MoAI Platform, you can easily configure the required number of GPUs without any code modifications.","The availability of large language models like LLaMA 2, fine-tuning techniques, and the MoAI Platform makes it possible for anyone to develop powerful AI applications. So please start repeating the same process outlined here on your own data.","In case if you still have any questions regarding this tutorial feel free to ask Moreh."]},{"l":"Learn More","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Mistral Fine-tuning","GPT Fine-tuning","Baichuan2 Fine-tuning","Qwen Fine-tuning"]}],[{"l":"Mistral Fine-tuning","p":["This tutorial guides you on fine-tuning the open-source Mistral 7B model on the MoAI Platform. You'll learn to utilize an AMD GPU cluster using the MoAI Platform and experience the improved performance and the benefits of automatic parallelization."]},{"l":"Overview","p":["The Mistral model, released by Mistral AI in 2023, is a giant language model. It has gained attention for outperforming larger models in complex tasks like code generation, question answering, and solving mathematical problems.","The Mistral 7B model uses only the Transformer's decoder, applying techniques like Sliding Window Attention to efficiently process the length of input tokens and introducing Rolling Buffer Cache to optimize memory usage.","In this tutorial, we'll fine-tune the Mistral 7B model using the python_code_instructions_18k-alpaca dataset for the code generation task on the MoAI Platform."]},{"l":"Before You Start","p":["Be sure to acquire a container or virtual machine on the MoAI Platform from your infrastructure provider and familiarize yourself with connecting to it via SSH. For example, you can sign up for the following public cloud service built on the MoAI Platform:","KT Cloud’s Hyperscale AI Computing ( https://cloud.kt.com/solution/hyperscaleAiComputing/)","If you wish to temporarily allocate trial containers and GPU resources, please contact Moreh.","(Moreh 연락처 정보 추가 예정)","After connecting via SSH, run the moreh-smi command to ensure that the MoAI Accelerator is displayed correctly. The device name may vary depending on the system. If you encounter any issues during this process, please contact your infrastructure provider or refer to the troubleshooting guide in the documentation."]},{"l":"Check MoAI Accelerator","p":["To train models like the Llama2 model outlined in this tutorial, you need to select an appropriate size MoAI Accelerator. Start by using the moreh-smi command to check the currently used MoAI Accelerator.","Detailed instructions for selecting the MoAI Accelerator size required for the training will be provided in 3. Model fine-tuning."]}],[{"l":"1. Prepare Fine-tuning","p":["Preparing the PyTorch script execution environment on the MoAI Platform is similar to doing so on a typical GPU server."]},{"l":"Checking PyTorch Installation","p":["After connecting to the container via SSH, run the following command to check if PyTorch is installed in the current conda environment:","The version name includes both the PyTorch version and the version of MoAI required to run it. In the example above, it indicates that version 24.2.0 of MoAI, which runs PyTorch version 1.13.1+cu116, is installed.","If you see the message conda: command not found, if the torch package is not listed, or if the torch package exists but does not include \"moreh\" in the version name, please follow the instructions in the Prepare Fine-tuning on MoAI Platform to create a conda environment."]},{"l":"Verifying PyTorch Installation","p":["Run the following command to ensure that the torch package is imported correctly and the MoAI Accelerator is recognized. If you encounter any issues during this process, please refer to the (troubleshooting TBA)."]},{"l":"Install Required Python Packages","p":["Execute the following command to install third-party Python packages required for script execution:"]},{"l":"Download the Training Script","p":["Execute the following command to download the PyTorch script for training from the GitHub repository. In this tutorial, we will be using the train_mistral.py script located inside the tutorial directory."]},{"l":"Download the Model and Tokenizer","p":["Let's download the checkpoint and tokenizer for the Mistral 7B v0.1 model using Hugging Face. This process requires agreeing to the community license and providing your Hugging Face token information to access the Mistral model. Additionally, since the checkpoint size for the Mistral 7B model is approximately 15GB, it's essential to have at least 16GB of storage space available to store the checkpoint.","First, enter the required information on the Hugging Face website below and proceed with the license agreement.","mistralai/Mistral-7B-v0.1 · Hugging Face","After submitting the agreement form, confirm that the status on the page has changed as follows:","If the status has been updated, you can use the download_mistral_7b.py script located in the tutorial directory to download the model checkpoint and tokenizer into the ./mistral-7b directory.","Replace user-token with your Hugging Face token.","Check if the model checkpoint and tokenizer have been downloaded."]},{"l":"Download Training Data","p":["In this tutorial, we will use the python_code_instructions_18k_alpaca dataset (11.4 MB) available on Hugging Face among various datasets publicly available for code generation training.","We will execute prepare_mistral_dataset.py to download the dataset and preprocess it for training.","The preprocessed dataset will be saved as mistral_dataset.pt.","You can load the saved dataset in your code as follows."]}],[{"l":"2. Understanding training code","p":["Once you have prepared all the training data, let's delve into the contents of the train_mistral.py script to execute the actual fine-tuning process. In this step, you will confirm MoAI Platform's full compatibility with PyTorch, ensuring that the training code is identical to general PyTorch code for Nvidia GPUs. Moreover, you'll explore how efficiently MoAI Platform implements complex parallelization techniques beyond the conventional scope.","We highly recommend proceeding with the tutorial using the provided script as is. Afterward, feel free to customize the script to fine-tune the Llama2 13B model or any other publicly available model in a different manner. If needed, refer to the MoAI Platform application guide LLM Fine-tuning 파라미터 가이드 provided by Moreh."]},{"l":"Training Code","p":["All the code used during training is exactly the same as when you're using PyTorch in general.","Import the necessary modules from the transformers library.","Load the model configuration and checkpoint publicly available on Hugging Face.","Then load the preprocessed dataset saved during the preparation for 1. Prepare Fine-tuning and define the data loaders.","Subsequently, the training proceeds similarly to general AI model training with Pytorch.","With MoAI Platform, you can seamlessly use your existing PyTorch scripts without any modifications."]},{"l":"About Advanced Parallelism","p":["In the training script used in this tutorial, there is an additional line of code as follows, which executes the top-tier parallelization feature provided by the MoAI Platform:","For colossal language models like Mistral 7B used in this tutorial, it's imperative to train them using multiple GPUs. When using frameworks other than MoAI Platform, you'll need to introduce parallelization techniques such as Data Parallel, Pipeline Parallel, and Tensor Parallel.","For instance, if a user wants to apply DDP in their typical PyTorch code, they would need to add the following code snippet. ( https://pytorch.org/tutorials/intermediate/ddp_tutorial.html)","In addition to these basic settings, users need to understand how Python code behaves in a multiprocessing environment during the process of writing training scripts. Especially in multi-node setups, configuring the environment of each node used for training is necessary. Furthermore, finding the optimal parallelization method considering factors such as model type, size, and dataset requires a considerable amount of time.","On the other hand, MoAI Platform's AP feature allows users to proceed with optimized parallelized training with just one line of code added to the training script, without the need for users to apply these additional parallelization techniques themselves.","MoAI Platform's Advanced Parallelization(AP) provides optimization and automation features that are difficult to experience in other frameworks. Through the AP feature, users can experience the best distributed parallel processing. By leveraging AP, users can easily configure the optimal parameters and environment variables for Pipeline Parallelism and Tensor Parallelism required for training large-scale models with just a single line of code."]}],[{"l":"3. Model fine-tuning","p":["Now, we will train the model through the following process."]},{"l":"Setting Accelerator Flavor","p":["(모든 문서에 추가될 그림 생성 예정)","AMD MI210 GPU with 32 units.","AMD MI250 GPU with 16 units:","AMD MI300X GPU with 8 units.","Do you remember checking MoAI Accelerator in the Mistral Fine-tuning (ENG) document? Now let's set up the accelerator needed for learning.","Enter 8 to use .","Enter q to complete the change.","First, we'll use the moreh-smi command to check the currently used MoAI Accelerator.","In MoAI Platform, physical GPUs are not directly exposed to users. Instead, virtual MoAI Accelerators are provided, which are available for use in PyTorch. By setting the accelerator's flavor, you can determine how much of the physical GPU will be utilized by PyTorch. Since the total training time and GPU usage cost vary depending on the selected accelerator flavor, users should make decisions based on their training scenarios. Refer to the following document to select the accelerator Flavor that aligns with your training objectives.","In this tutorial, we will use a 2048GB-sized MoAI Accelerator.","KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보","LLM Fine-tuning 파라미터 가이드","Now you can see that it has been successfully changed to .","Please refer to the document above or reach out to your infrastructure provider to inquire about the GPU types and quantities corresponding to each flavor.","Select when using KT Cloud's Hyperscale AI Computing.","Select when using Moreh's trial container.","The current MoAI Accelerator in use has a memory size of 64GB.","Therefore, after switching from the initially set flavor to , we will use the moreh-smi command to confirm that the change has been successfully applied.","To confirm that the changes have been successfully applied, use the moreh-smi command again to check the currently used MoAI Accelerator.","You can choose one of the following flavors to proceed:","You can enter the number to switch to a different flavor.","You can utilize the moreh-switch-model command to review the available accelerator flavors on the current system. For seamless model training, consider using the moreh-switch-model command to switch to a MoAI Accelerator with larger memory capacity."]},{"l":"Training Execution","p":["Execute the train_mistral.py script below.","If the training proceeds smoothly, you should see the following log. Take note of the sections highlighted in blue, as they indicate that the Advanced Parallelism feature is functioning correctly. It's worth noting that in the PyTorch script we examined earlier, there was no handling for using multiple GPUs simultaneously.","You can confirm that the training is progressing smoothly by observing the loss values decreasing as follows.","The throughput displayed during training indicates how many tokens per second are being processed through the PyTorch script.","When using 16 AMD MI250 GPUs: approximately 60,000 tokens/sec","Approximate training time based on GPU type and quantity is as follows:","When using 16 AMD MI250 GPUs: approximately 50 minutes"]},{"l":"Checking Accelerator Status During Training","p":["During training, open another terminal and connect to the container. You can execute the moreh-smi command to observe the MoAI Accelerator occupying memory while the training script is running. Please check the memory occupancy of MoAI accelerator when the training loss appears in the execution log after the initialization process."]}],[{"l":"4. Checking Training Results","p":["Running the train_mistral.py script, as in the previous section, will save the resulting model in the mistral_code_generation directory. This is a pure PyTorch model parameter file and is fully compatible with regular GPU servers, not just the MoAI Platform.","You can test the trained model using the inference_mistral.py script located in the tutorial directory of the GitHub repository you downloaded earlier. In this test, the prompt \"Create a function that takes a list of strings as input and joins them with spaces\" was used.","Run the code below.","Upon examining the output, you can confirm that the model has appropriately generated the function as per the prompt."]}],[{"l":"5. Changing the Number of GPUs","p":["Let's rerun the fine-tuning task with a different number of GPUs. MoAI Platform abstracts GPU resources into a single accelerator and automatically performs parallel processing. Therefore, there is no need to modify the PyTorch script even when changing the number of GPUs."]},{"l":"Changing the Accelerator type","p":["Switch the accelerator type using the moreh-switch-model tool. For instructions on changing the accelerator, please refer to the 3. Model fine-tuning","Please contact your infrastructure provider and choose one of the following options before proceeding. (HAC) AI Accelerator Information","AMD MI250 GPU with 32 units","When using Moreh's trial container: select","When using KT Cloud's Hyperscale AI Computing: select","AMD MI210 GPU with 64 units","AMD MI300X GPU with 16 units"]},{"l":"Training Parameters","p":["Run the train_mistral.py script again without changing the batch size.","If the training proceeds normally, you should see the following logs:","Compared to the previous execution results when the number of GPUs was half, you can see that the learning is the same and the throughput has improved.","When using AMD MI250 GPU 16 → 32 : approximately 60,000 tokens/sec → 110,000 tokens/sec"]}],[{"l":"6. Conclusion","p":["From this tutorial, we have seen how to fine-tune the Mistral 7B model on the MoAI Platform. With MoAI Platform, you can easily fine-tune PyTorch-based open-source LLM models on GPU clusters while retaining your existing training code. Additionally, using the MoAI platform, you can easily configure the number of GPUs you need without any code changes. So please don’t hesitate to dive in and develop new models quickly and effortlessly with your data!"]},{"l":"Learn more","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Llama2 Fine-tuning","GPT Fine-tuning","Baichuan2 Fine-tuning","Qwen Fine-tuning"]}],[{"l":"GPT Fine-tuning","p":["This tutorial guides you on how to fine-tune GPT-based models open-sourced by Hugging Face on the MoAI Platform. Throughout this tutorial, you'll learn how to utilize an AMD GPU cluster with the MoAI Platform and explore the benefits of improved performance and automatic parallelization."]},{"l":"Overview","p":["GPT is a language model architecture that uses only the Transformer decoder structure. It was first introduced by OpenAI with GPT-1 in 2018. Since then, OpenAI has developed GPT-2, GPT-3, and GPT-4 models by increasing the dataset size and model parameters used for pre-training. Among them, the models that have been open-sourced are GPT-1 and GPT-2.","As the basic architecture of GPT is open-source, Hugging Face offers various GPT-based models beyond those developed by OpenAI.","In this tutorial, we'll use the MoAI Platform to fine-tune the Cerebras-GPT-13B model for the code generation task."]},{"l":"Before You Start","p":["Make sure to obtain a container or virtual machine on the MoAI Platform from your infrastructure provider and learn how to connect to it via SSH. For instance, you can apply for the following public cloud service based on the MoAI Platform:","KT Cloud's Hyperscale AI Computing ( https://cloud.kt.com/solution/hyperscaleAiComputing/)","If you wish to temporarily allocate trial containers and GPU resources, please contact Moreh.","(Moreh contact information will be added soon)","After connecting via SSH, run the moreh-smi command to ensure that the MoAI Accelerator is displayed correctly. The device name may vary depending on the system. If you encounter any issues during this process, please contact your infrastructure provider or refer to the troubleshooting guide in the documentation."]},{"l":"Checking MoAI Accelerator","p":["To train sLLMs like the GPT model we'll be guiding you through in this tutorial, you need to select an appropriate size MoAI Accelerator. First, use the moreh-smi command to check the currently used MoAI Accelerator.","Detailed instructions for selecting the MoAI Accelerator size required for the training will be provided in 3. Finetuning Model"]}],[{"l":"1. Prepare Fine-tuning","p":["Preparing the PyTorch script execution environment on the MoAI Platform is similar to doing so on a typical GPU server."]},{"l":"Checking PyTorch Installation","p":["After connecting to the container via SSH, run the following command to check if PyTorch is installed in the current conda environment:","The version name includes both the PyTorch version and the version of MoAI required to run it. In the example above, it indicates that version 24.2.0 of MoAI, which runs PyTorch version 1.13.1+cu116, is installed.","If you see the message conda: command not found, if the torch package is not listed, or if the torch package exists but does not include \"moreh\" in the version name, please follow the instructions in the (Prepare Fine-tuning on MoAI Platform) document to create a conda environment."]},{"l":"Verifying PyTorch Installation","p":["Run the following command to ensure that the torch package is imported correctly and the MoAI Accelerator is recognized. If you encounter any issues during this process, please refer to the (troubleshooting TBA)."]},{"l":"Install Required Python Packages","p":["Execute the following command to pre-install third-party Python packages required for script execution:"]},{"l":"Downloading Training Script","p":["Run the following command to download the PyTorch script for training from the GitHub repository. In this tutorial, we will use the train_gpt.py script located inside the tutorial directory."]},{"l":"Downloading Training Data","p":["Hugging Face provides not only model checkpoints but also various datasets that can be used for model fine-tuning.","In this tutorial, we will use the mlabonne/Evol-Instruct-Python-26k dataset. This dataset consists of Python code written in response to given prompt conditions.","To download the training data, we will use the prepare_gpt_dataset.py script located in the dataset directory to download the dataset available on Hugging Face and preprocess it for immediate use in fine-tuning training.","The preprocessed dataset is saved as gpt_dataset.pt.","The saved dataset can be loaded and used in code as follows."]}],[{"l":"2. Understanding training code","p":["Once you have prepared all the training data, let's take a look at the contents of the train_gpt.py script to execute the actual fine-tuning process. In this step, you'll notice that the MoAI Platform offers full compatibility with PyTorch, meaning that the training code is 100% identical to typical PyTorch code for Nvidia GPUs. Furthermore, you'll see how efficiently the MoAI Platform implements complex parallelization techniques beyond what's traditionally possible.","We highly recommend proceeding with the tutorial using the provided script as is. Afterward, feel free to customize the script to fine-tune the Cerebras-GPT-13B model or any other publicly available model in a different manner. If needed, refer to the MoAI Platform application guide ( LLM Fine-tuning 파라미터 가이드) provided by Moreh."]},{"l":"Training Code","p":["All code remains fully consistent with general PyTorch usage.","Firstly, import the required modules from the transformers library.","Load the model configuration and checkpoint publicly available on Hugging Face.","Then load the preprocessed dataset saved during the preparation for 1. Prepare Fine-tuning and define the data loaders.","Subsequently, the training proceeds similarly to general AI model training with Pytorch.","As shown above, you can code in the same way as traditional PyTorch code on MoAI Platform."]},{"l":"About Advanced Parallelism","p":["In the training script used in this tutorial, there is an additional line of code as follows, which executes the top-tier parallelization feature provided by the MoAI Platform:","For enormous language models like Cerebras-GPT-13B used in this tutorial, it is inevitable to train them using multiple GPUs. In such cases, if you were to use frameworks other than the MoAI Platform, you would need to employ parallelization techniques like Data Parallel, Pipeline Parallel, or Tensor Parallel for training.","For instance, if a user wants to apply DDP in a typical PyTorch code, the following code snippet would need to be added. ( https://pytorch.org/tutorials/intermediate/ddp_tutorial.html)","In addition to these basic settings, users need to understand how Python code behaves in a multiprocessing environment during the process of writing the training script. Especially in a multi-node setup, additional configuration work is required for the nodes used in training. Furthermore, finding the optimal parallelization method considering factors such as the type of model, its size, and the dataset can take a significant amount of time.","On the other hand, MoAI Platform's AP feature allows users to proceed with optimized parallelized training with just one line of code added to the training script, without the need for users to apply these additional parallelization techniques themselves.","Experience optimal distributed parallel processing like no other framework can offer, thanks to MoAI Platform's Advanced Parallelization (AP), a feature that optimizes and automates parallelization in ways not found in other frameworks. With the AP feature, you can easily secure the optimal parameters and environment variables for Pipeline Parallelism and Tensor Parallelism, typically required for training large-scale models, with just one simple line of code."]}],[{"l":"3. Model fine-tuning","p":["Now, we will train the model through the following process."]},{"l":"Setting the Accelerator","p":["(모든 문서에 추가될 그림 생성 예정)","AMD MI210 GPU with 32 units.","AMD MI250 GPU with 16 units:","AMD MI300X GPU with 8 units.","Do you remember checking MoAI Accelerator in the GPT Fine-tuning document? Now let's set up the accelerator needed for learning.","Enter 8 to use","Enter q to complete the change.","First, we'll use the moreh-smi command to check the currently used MoAI Accelerator.","In MoAI Platform, physical GPUs are not directly exposed to users. Instead, virtual MoAI Accelerators are provided, which are available for use in PyTorch. By setting the accelerator's flavor, you can determine how much of the physical GPU will be utilized by PyTorch. Since the total training time and GPU usage cost vary depending on the selected accelerator flavor, users should make decisions based on their training scenarios. Refer to the following document to select the accelerator Flavor that aligns with your training objectives.","In this tutorial, we will use a 2048GB-sized MoAI Accelerator.","KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보","LLM Fine-tuning 파라미터 가이드","Please refer to the document above or reach out to your infrastructure provider to inquire about the GPU types and quantities corresponding to each flavor.","Select when using KT Cloud's Hyperscale AI Computing.","Select when using Moreh's trial container.","The current MoAI Accelerator in use has a memory size of 256GB.","Therefore, after switching from the initially set flavor to , we will use the moreh-smi command to confirm that the change has been successfully applied.","To confirm that the changes have been successfully applied, use the moreh-smi command again to check the currently used MoAI Accelerator.","You can choose one of the following flavors to proceed:","You can enter the number to switch to a different flavor.","You can utilize the moreh-switch-model command to review the available accelerator flavors on the current system. For seamless model training, consider using the moreh-switch-model command to switch to a MoAI Accelerator with larger memory capacity.","로 잘 변경된 것을 확인할 수 있습니다."]},{"l":"Training Execution","p":["Execute the train_gpt.py script below.","If the training proceeds smoothly, you should see the following logs. By going through this logs, you can verify that the Advanced Parallelism feature, which determines the optimal parallelization settings, is functioning properly. It's worth noting that, apart from the single line of AP code we looked at earlier in the PyTorch script, there is no handling for using multiple GPUs simultaneously in other parts of the script.","The training loss decreases as follows, confirming normal training progress.","The throughput displayed during training indicates how many tokens per second are being processed through the PyTorch script.","When using 16 AMD MI250 GPUs: approximately 6800 tokens/sec","Approximate training times based on GPU type and quantity are as follows:","When using 16 AMD MI250 GPUs: approximately 81 minutes"]},{"l":"Checking Accelerator Status During Training","p":["During training, open another terminal and connect to the container. You can execute the moreh-smi command to observe the MoAI Accelerator occupying memory while the training script is running. Please check the memory occupancy of MoAI accelerator when the training loss appears in the execution log after the initialization process."]}],[{"l":"4. Checking Training Results","p":["As in the previous chapter, when you run the train_gpt.py script, the resulting model will be saved in the code_generation directory. This is a pure PyTorch model parameter file and is fully compatible compatible not only with MoAI Platform but also with regular GPU servers.","You can test the trained model using the inference_gpt.py script located under the tutorial directory of the GitHub repository you downloaded beforehand.","Run the train script.","Upon inspecting the output, you can confirm that the model has generated an appropriate function based on the prompt content."]}],[{"l":"5. Changing the Number of GPUs","p":["Let's rerun the fine-tuning task with a different number of GPUs. MoAI Platform abstracts GPU resources into a single accelerator and automatically performs parallel processing. Therefore, there is no need to modify the PyTorch script even when changing the number of GPUs."]},{"l":"Changing the Accelerator type","p":["Switch the accelerator type using the moreh-switch-model tool. For instructions on changing the accelerator, please refer again to the 3. Model fine-tuning document.","Please contact your infrastructure provider and choose one of the following options before proceeding. ( KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보)","AMD MI250 GPU with 32 units","When using Moreh's trial container: select","When using KT Cloud's Hyperscale AI Computing: select","AMD MI210 GPU with 64 units","AMD MI300X GPU with 16 units"]},{"l":"Training Parameters","p":["Run the train_gpt.py script again.","Since the available GPU memory has doubled, let's also change the batch size to 32 and run it.","If the training proceeds normally, the following log will be output.","Compared to the previous execution results when the number of GPUs was half, you can see that the learning is the same and the throughput has improved.","When using AMD MI250 GPU 16 → 32 : approximately 6800 tokens/sec → 13000 tokens/sec"]}],[{"l":"6. Conclusion","p":["So far, we have looked at the process of fine-tuning the GPT-based model from HuggingFace on the MoAI Platform. With MoAI Platform, you can easily fine-tune PyTorch-based open-source LLM models on GPU clusters while maintaining existing training code. Additionally, if you use the MoAI platform, you can easily configure the number of GPUs you need without changing any code. Try developing new models quickly and effortlessly with your data."]},{"l":"Learn More","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Llama2 Fine-tuning","Mistral Fine-tuning","Baichuan2 Fine-tuning","Qwen Fine-tuning"]}],[{"l":"Qwen Fine-tuning","p":["This tutorial introduces an example of fine-tuning the open-source Qwen1.5 7B model on the MoAI Platform. Through this tutorial, you'll learn how to leverage the AMD GPU cluster using the MoAI Platform and explore the benefits of performance and automatic parallelization."]},{"l":"Overview","p":["The Qwen1.5 7B model is an open-source LLM released by Tongyi Qianwen(通义千问) in China. In this tutorial, we'll be performing a code generation task on the MoAI Platform, fine-tuning the Qwen1.5 7B model using the python_code_instruction_18k_alpaca dataset, which consists of system prompts, instructions for code generation, input values, and the code to be generated."]},{"l":"Before You Start","p":["Be sure to acquire a container or virtual machine on the MoAI Platform from your infrastructure provider and familiarize yourself with connecting to it via SSH. For example, you can sign up for the following public cloud service built on the MoAI Platform:","KT Cloud’s Hyperscale AI Computing ( https://cloud.kt.com/solution/hyperscaleAiComputing/)","If you wish to temporarily allocate trial containers and GPU resources, please contact Moreh.","(Moreh 연락처 정보 추가 예정)","After connecting via SSH, run the moreh-smi command to ensure that the MoAI Accelerator is displayed correctly. The device name may vary depending on the system. If you encounter any issues during this process, please contact your infrastructure provider or refer to the troubleshooting guide in the documentation."]},{"l":"Check MoAI Accelerator","p":["To train models like the Llama2 model outlined in this tutorial, you need to select an appropriate size MoAI Accelerator. Start by using the moreh-smi command to check the currently used MoAI Accelerator.","Detailed instructions for selecting the MoAI Accelerator size required for the training will be provided in 3. Model fine-tuning"]}],[{"l":"1. Prepare Fine-tuning","p":["Preparing the PyTorch script execution environment on the MoAI Platform is similar to doing so on a typical GPU server."]},{"l":"Checking PyTorch Installation","p":["After connecting to the container via SSH, run the following command to check if PyTorch is installed in the current conda environment:","The version name includes both the PyTorch version and the version of MoAI required to run it. In the example above, it indicates that version 24.2.0 of MoAI, which runs PyTorch version 1.13.1+cu116, is installed.","If you see the message conda: command not found, if the torch package is not listed, or if the torch package exists but does not include \"moreh\" in the version name, please follow the instructions in the (Prepare Fine-tuning on MoAI Platform) document to create a conda environment."]},{"l":"Verifying PyTorch Installation","p":["Run the following command to ensure that the torch package is imported correctly and the MoAI Accelerator is recognized. If you encounter any issues during this process, please refer to the (troubleshooting TBA)."]},{"l":"Install Required Python Packages","p":["Execute the following command to install third-party Python packages required for script execution:"]},{"l":"Download the Training Script","p":["Execute the following command to download the PyTorch script for training from the GitHub repository. In this tutorial, we will be using the train_qwen.py script located inside the tutorial directory."]},{"l":"Download Training Data","p":["To download the training data, we'll use the prepare_qwen_dataset.py script located in the dataset directory. When you run the code, it will download the cnn_dailymail dataset, preprocess it for training, and save it as qwen_dataset.pt file.","The preprocessed dataset is saved as qwen_dataset.pt.","You can then load the stored dataset in your code like this:"]}],[{"l":"2. Understanding training code","p":["If you've prepared all the training data, let's now take a look at the train_qwen.py script to actually run the fine-tuning process. This script is a standard PyTorch code that executes fine-tuning based on the implementation of the Qwen model available in the Hugging Face Transformers library.","In this step, you'll observe that MoAI Platform is fully compatible with PyTorch, and the training code is exactly the same as standard PyTorch code designed for NVIDIA GPUs. Moreover, you can also see how efficiently MoAI Platform can implement complex parallelization techniques.","We recommend starting by using the provided script to complete the tutorial as-is. Afterwards, feel free to modify the script as desired to fine-tune the Qwen1.5 7B model in different ways. Thanks to MoAI Platform's full compatibility with PyTorch, such modifications are possible. If needed, refer to the ( LLM Fine-tuning 파라미터 가이드) for assistance."]},{"l":"Training Code","p":["All the code used during training is exactly the same as the standard method of using PyTorch.","Firstly, import the required modules from the transformers library.","Load the model configuration and checkpoint publicly available on Hugging Face.","Then load the preprocessed dataset saved during the preparation for 1. Prepare Fine-tuning and define the data loaders.","Subsequently, the training proceeds similarly to general AI model training with Pytorch.","As shown above, you can code in the same way as traditional PyTorch code on MoAI Platform."]},{"l":"About Advanced Parallelism","p":["In the training script used in this tutorial, there is an additional line of code as follows, which executes the top-tier parallelization feature provided by the MoAI Platform:","To train massive language models like Qwen1.5 7B, which we use in this tutorial, it's inevitable to utilize multiple GPUs. If using different frameworks, you'll need to implement parallelization techniques such as Data Parallel, Pipeline Parallel, and Tensor Parallel to proceed with training.","For instance, if a user wants to apply DDP in a typical PyTorch code, the following code snippet would need to be added. ( https://pytorch.org/tutorials/intermediate/ddp_tutorial.html)","In addition to these basic settings, users need to understand how Python code behaves in a multiprocessing environment during the process of writing the training script. Especially in a multi-node setup, additional configuration work is required for the nodes used in training. Furthermore, finding the optimal parallelization method considering factors such as the type of model, its size, and the dataset can take a significant amount of time.","On the other hand, MoAI Platform's AP feature allows users to proceed with optimized parallelized training with just one line of code added to the training script, without the need for users to apply these additional parallelization techniques themselves.","Experience optimal distributed parallel processing like no other framework can offer, thanks to MoAI Platform's Advanced Parallelization (AP), a feature that optimizes and automates parallelization in ways not found in other frameworks. With the AP feature, you can easily secure the optimal parameters and environment variables for Pipeline Parallelism and Tensor Parallelism, typically required for training large-scale models, with just one simple line of code."]}],[{"l":"3. Model fine-tuning","p":["Now, we will train the model through the following process."]},{"l":"Setting Accelerator Flavor","p":["(모든 문서에 추가될 그림 생성 예정)","AMD MI210 GPU with 32 units.","AMD MI250 GPU with 16 units:","AMD MI300X GPU with 8 units.","Do you remember checking MoAI Accelerator in the Mistral Fine-tuning (ENG) document? Now let's set up the accelerator needed for learning.","Enter 8 to use","Enter q to complete the change.","First, we'll use the moreh-smi command to check the currently used MoAI Accelerator.","In MoAI Platform, physical GPUs are not directly exposed to users. Instead, virtual MoAI Accelerators are provided, which are available for use in PyTorch. By setting the accelerator's flavor, you can determine how much of the physical GPU will be utilized by PyTorch. Since the total training time and GPU usage cost vary depending on the selected accelerator flavor, users should make decisions based on their training scenarios. Refer to the following document to select the accelerator Flavor that aligns with your training objectives.","In this tutorial, we will use a 2048GB-sized MoAI Accelerator.","KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보","LLM Fine-tuning 파라미터 가이드","Please refer to the document above or reach out to your infrastructure provider to inquire about the GPU types and quantities corresponding to each flavor.","Select when using KT Cloud's Hyperscale AI Computing.","Select when using Moreh's trial container.","The current MoAI Accelerator in use has a memory size of 64GB.","Therefore, after switching from the initially set flavor to , we will use the moreh-smi command to confirm that the change has been successfully applied.","To confirm that the changes have been successfully applied, use the moreh-smi command again to check the currently used MoAI Accelerator.","You can choose one of the following flavors to proceed:","You can enter the number to switch to a different flavor.","You can utilize the moreh-switch-model command to review the available accelerator flavors on the current system. For seamless model training, consider using the moreh-switch-model command to switch to a MoAI Accelerator with larger memory capacity.","로 잘 변경된 것을 확인할 수 있습니다."]},{"l":"학습 실행","p":["주어진 train_qwen.py 스크립트를 실행합니다.","학습이 정상적으로 진행된다면 다음과 같은 로그가 출력될 것입니다. 중간에 파란색으로 표시된 부분을 보시면 Advanced Parallelism 기능이 정상 동작하는 것을 확인할 수 있습니다. 앞서 살펴본 PyTorch 스크립트에서는 AP 코드 한 줄을 제외한 다른 부분에서 GPU 여러 개를 동시에 사용하기 위한 처리가 전혀 없었음을 참고하십시오.","You can confirm that the training is progressing smoothly by observing the loss values appearing as follows.","The throughput displayed during training indicates how many tokens per second are being processed through the PyTorch script.","When using 16 AMD MI250 GPUs: approximately 59,000 tokens/sec","Approximate training time based on GPU type and quantity is as follows:","When using 16 AMD MI250 GPUs: approximately 40 minutes"]},{"l":"Checking Accelerator Status During Training","p":["During training, open another terminal and connect to the container. You can execute the moreh-smi command to observe the MoAI Accelerator occupying memory while the training script is running. Please check the memory occupancy of MoAI accelerator when the training loss appears in the execution log after the initialization process."]}],[{"l":"4. Checking Training Results","p":["Running the train_qwen.py script, as in the previous chapter, will save the resulting model in the qwen_code_generation directory. This is a pure PyTorch model parameter file and is fully compatible with regular GPU servers, not just the MoAI Platform.","You can test the trained model using the inference_qwen.py script located under the tutorial directory in the GitHub repository you downloaded earlier. In the test, the prompt \"Given a list of strings, create a function that joins them with spaces\" was used.","Run the code below.","Upon examining the output, you can confirm that the model has appropriately generated the function as per the prompt."]}],[{"l":"5. Changing the Number of GPUs","p":["Let's rerun the fine-tuning task with a different number of GPUs. MoAI Platform abstracts GPU resources into a single accelerator and automatically performs parallel processing. Therefore, there is no need to modify the PyTorch script even when changing the number of GPUs."]},{"l":"Changing the Accelerator type","p":["Switch the accelerator type using the moreh-switch-model tool. For instructions on changing the accelerator, please refer to the 3. Model fine-tuning","Please contact your infrastructure provider and choose one of the following options before proceeding. ( KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보)","AMD MI250 GPU with 32 units","When using Moreh's trial container: select","When using KT Cloud's Hyperscale AI Computing: select","AMD MI210 GPU with 64 units","AMD MI300X GPU with 16 units"]},{"l":"Training Parameters","p":["Run the train_qwen.py script again without changing the batch size.","If the training proceeds normally, you should see the following logs:","Compared to the previous execution results when the number of GPUs was half, you can see that the learning is the same and the throughput has improved.","When using AMD MI250 GPU 16 → 32 : approximately 59,000 tokens/sec → 105,000 tokens/sec"]}],[{"l":"6. Conclusion","p":["So far, we've explored the process of fine-tuning the Qwen1.5 7B model on the MoAI Platform. With MoAI Platform, you can easily fine-tune PyTorch-based open-source LLM models on GPU clusters while keeping your existing training code intact. Additionally, using MoAI Platform, you can easily configure the required number of GPUs without any code changes. So please don’t hesitate to dive in and develop new models quickly and effortlessly with your data!","In case if you still have any questions regarding this tutorial feel free to ask Moreh."]},{"l":"Learn More","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Llama2 Fine-tuning","Mistral Fine-tuning","GPT Fine-tuning","Baichuan2 Fine-tuning"]}],[{"l":"Baichuan2 Fine-tuning","p":["The following tutorial will take you through the steps required to fine-tune Baichuan2 13B model with an example dataset, using the MoAI Platform. Through the tutorial, you'll learn how to utilize an AMD GPU cluster with MoAI Platform and discover the benefits of improved performance and automatic parallelization."]},{"l":"Overview","p":["Baichuan2 is a large-scale multilingual language model developed by Baichuan Intelligent Technology. This model offers configurations with 70 billion and 130 billion parameters trained on vast datasets consisting of 2.6 trillion tokens.","In this tutorial, we'll fine-tune the Baichuan2 13B model using the MoAI Platform with the Bitext-customer-support-llm-chatbot-training-dataset, a text-generation e-commerce dataset."]},{"l":"Before You Start","p":["Be sure to acquire a container or virtual machine on the MoAI Platform from your infrastructure provider and familiarize yourself with connecting to it via SSH. For example, you can sign up for the following public cloud service built on the MoAI Platform:","KT Cloud’s Hyperscale AI Computing ( https://cloud.kt.com/solution/hyperscaleAiComputing/)","If you wish to temporarily allocate trial containers and GPU resources, please contact Moreh.","(Moreh 연락처 정보 추가 예정)","After connecting via SSH, run the moreh-smi command to ensure that the MoAI Accelerator is displayed correctly. The device name may vary depending on the system. If you encounter any issues during this process, please contact your infrastructure provider or refer to the troubleshooting guide in the documentation."]},{"l":"Check MoAI Accelerator","p":["To train models like the Llama2 model outlined in this tutorial, you need to select an appropriate size MoAI Accelerator. Start by using the moreh-smi command to check the currently used MoAI Accelerator.","Detailed instructions for selecting the MoAI Accelerator size required for the training will be provided in 3. Model fine-tuning."]}],[{"l":"1. Prepare Fine-tuning","p":["Preparing the PyTorch script execution environment on the MoAI Platform is similar to doing so on a typical GPU server."]},{"l":"Checking PyTorch Installation","p":["After connecting to the container via SSH, run the following command to check if PyTorch is installed in the current conda environment:","The version name includes both the PyTorch version and the MoAI version required to execute it. In the example above, it indicates that PyTorch version 1.13.1+cu116 is running with MoAI version 24.3.0 installed.","If you encounter a conda: command not found message, or if the torch package is not listed, or if the torch package exists but does not include \"moreh\" in the version name, please follow the instructions in the (Prepare Fine-tuning on MoAI Platform) to create a conda environment. If the moreh version is not 24.3.0 but a different version, please execute the following code."]},{"l":"Verifying PyTorch Installation","p":["Run the following command to ensure that the torch package is imported correctly and the MoAI Accelerator is recognized. If you encounter any issues during this process, please refer to the (troubleshooting TBA)."]},{"l":"Download the Training Script","p":["Execute the following command to download the PyTorch script for training from the GitHub repository. In this tutorial, we will be using the train_baichuan2_13b.py script located inside the tutorial directory."]},{"l":"Install Required Python Packages","p":["Execute the following command to install third-party Python packages required for script execution:"]},{"l":"Download Training Data","p":["Execute the following command to install third-party Python packages required for script execution:","To download the training data for this tutorial, we'll use the prepare_baichuan_dataset.py script located inside the dataset directory. When you run the code, it will download the Bitext-custormer-support-llm-chatbot dataset, and preprocess it for training, and save it as baichuan_dataset.pt.","The preprocessed dataset is saved as baichuan_dataset.pt.","Then, You can load the stored dataset in your code like this:"]}],[{"l":"2. Understanding training code","p":["If you've prepared all the training data, let's now take a look at the contents of train_baichuan2_13b.py script for the actual fine-tuning process. In this step, you'll notice that MoAI Platform ensures full compatibility with PyTorch, confirming that the training code is identical to the typical PyTorch code for NVIDIA GPUs. Additionally, you'll explore how efficiently MoAI Platform implements complex parallelization techniques beyond this.","First and foremost, it's recommended to proceed with the tutorial using the provided script as is until the end. Afterwards, you can modify the script as you wish to fine-tune the Baichuan model in different ways. If needed, refer to the MoAI Platform Application Guide ( LLM Fine-tuning Parameter Guide)"]},{"l":"Training Code","p":["All the code is exactly the same as when using PyTorch conventionally.","First, import the necessary modules from the transformers library.","Load the model configuration and checkpoint from HuggingFace.","Load the preprocessed dataset saved during the Preparing for Fine-tuning and define the data loader.","이후 학습도 일반적인 Pytorch를 사용하여 모델 학습과 동일하게 진행됩니다.","As shown above, with MoAI Platform, you can use your existing PyTorch scripts without any modifications."]},{"l":"About Advanced Parallelism","p":["The training script used in this tutorial includes the following additional line of code, which performs automatic parallelization provided by MoAI Platform.","For example, for huge language models like Baichuan2 13B, it's inevitable to train them using multiple GPUs. In such cases, if you're not using MoAI Platform, you'll need to introduce parallelization techniques like Data Parallel, Pipeline Parallel, and Tensor Parallelism.","예를 들어, 사용자가 일반적인 pytorch 코드에서 DDP를 적용하고 싶다면, 다음과 같은 코드 스니펫이 추가되어야 합니다. ( https://pytorch.org/tutorials/intermediate/ddp_tutorial.html)","DDP can be relatively easy to apply, but implementing techniques like pipeline parallelism or tensor parallelism requires quite complex code modifications. To apply optimized parallelization, you need to understand how Python code behaves in a multi-processing environment during the training script writing process, especially in multi-node settings where you must configure the environment for each node used in training. Moreover, finding the optimal parallelization method considering factors like model type, size, and dataset requires a considerable amount of time.","On the other hand, with MoAI Platform's AP feature, you can proceed with optimized parallelized training with just one line of code added to your training script, without the need to implement these complex parallelization techniques yourself.","Experience the optimal automated distributed parallel processing that is only possible with MoAI Platform's Advanced Parallelization (AP) feature, unlike anything you've encountered in other frameworks. With AP, you can easily configure the optimal parameters and environment variables for pipeline parallelism and tensor parallelism, typically required for training large-scale models, with just a single line of code."]}],[{"l":"3. Model fine-tuning","p":["Now, we will train the model through the following process."]},{"l":"Setting Accelerator Flavor","p":["(모든 문서에 추가될 그림 생성 예정)","AMD MI210 GPU with 32 units.","AMD MI250 GPU with 16 units:","AMD MI300X GPU with 8 units.","Enter 8 to use .","Enter q to complete the change.","First, we'll use the moreh-smi command to check the currently used MoAI Accelerator.","In MoAI Platform, physical GPUs are not directly exposed to users. Instead, virtual MoAI Accelerators are provided, which are available for use in PyTorch. By setting the accelerator's flavor, you can determine how much of the physical GPU will be utilized by PyTorch. Since the total training time and GPU usage cost vary depending on the selected accelerator flavor, users should make decisions based on their training scenarios. Refer to the following document to select the accelerator Flavor that aligns with your training objectives.","In this tutorial, we will use a 2048GB-sized MoAI Accelerator.","KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보","LLM Fine-tuning 파라미터 가이드","Now you can see that it has been successfully changed to .","Please refer to the document above or reach out to your infrastructure provider to inquire about the GPU types and quantities corresponding to each flavor.","Remember we checked the MoAI Accelerator in the previous Baichuan2 Finetuning step? Now, let's set up the required accelerators for the actual training process.","Select when using KT Cloud's Hyperscale AI Computing.","Select when using Moreh's trial container.","The current MoAI Accelerator in use has a memory size of 256GB.","Therefore, after switching from the initially set flavor to , we will use the moreh-smi command to confirm that the change has been successfully applied.","To confirm that the changes have been successfully applied, use the moreh-smi command again to check the currently used MoAI Accelerator.","You can choose one of the following flavors to proceed:","You can enter the number to switch to a different flavor.","You can utilize the moreh-switch-model command to review the available accelerator flavors on the current system. For seamless model training, consider using the moreh-switch-model command to switch to a MoAI Accelerator with larger memory capacity."]},{"l":"Training Execution","p":["Execute the train_baichuan2_13b.py script below.","If the training proceeds smoothly, you should see the following logs. By going through this logs, you can verify that the Advanced Parallelism feature, which determines the optimal parallelization settings, is functioning properly. It's worth noting that, apart from the single line of AP code we looked at earlier in the PyTorch script, there is no handling for using multiple GPUs simultaneously in other parts of the script.","You can confirm that the training is progressing smoothly by observing the loss values decreasing as follows.","The throughput displayed during training indicates how many tokens per second are being processed through the PyTorch script.","When using 8 AMD MI250 GPUs: approximately 191605 tokens/sec","Approximate training time based on GPU type and quantity is as follows:","When using 8 AMD MI250 GPUs: approximately 30 minutes"]},{"l":"Checking Accelerator Status During Training","p":["During training, open another terminal and connect to the container. You can execute the moreh-smi command to observe the MoAI Accelerator occupying memory while the training script is running. Please check the memory occupancy of MoAI accelerator when the training loss appears in the execution log after the initialization process."]}],[{"l":"4. Checking Training Results","p":["Similar to the previous chapter, when you execute the train_baichuan2_13b.py script, the resulting model will be saved in the baichuan_code_generation directory. This model, stored as a pure PyTorch parameter file, is fully compatible not only with the MoAI Platform but also with regular GPU servers.","You can test the trained model using the inference_baichuan.py script located under the tutorial directory of the GitHub repository you downloaded earlier.","Run the code below.","Upon inspecting the output, you can verify that the model has generated appropriate responses to the prompts."]}],[{"l":"5. Changing the Number of GPUs","p":["Let's rerun the fine-tuning task with a different number of GPUs. MoAI Platform abstracts GPU resources into a single accelerator and automatically performs parallel processing. Therefore, there is no need to modify the PyTorch script even when changing the number of GPUs."]},{"l":"Changing the Accelerator type","p":["Switch the accelerator type using the moreh-switch-model tool. For instructions on changing the accelerator, please refer to the 3. Model fine-tuning","Please contact your infrastructure provider and choose one of the following options before proceeding. ( KT Hyperscale AI Computing(HAC) AI Accelerator Information)","AMD MI250 GPU with 32 units","When using Moreh's trial container: select","When using KT Cloud's Hyperscale AI Computing: select","AMD MI210 GPU with 64 units","AMD MI300X GPU with 16 units"]},{"l":"Training Parameters","p":["Run the train_baichuan2_13b.py script again.","Since the available GPU memory has doubled, let's increase the batch size to 2048 and run the training.","f the training proceeds normally, you should see the following log:","Upon comparison with the results obtained when the number of GPUs was halved, you'll notice that the training progresses similarly, with an improvement in throughput.","When using AMD MI250 GPU 16 → 32 : approximately 198,000 tokens/sec → 370,000 tokens/sec"]}],[{"l":"6. Conclusion","p":["So far, we've explored the process of fine-tuning the Baichuan2 13B model, which is publicly available on Hugging Face, using the MoAI Platform. With MoAI Platform, you can easily fine-tune PyTorch-based open-source LLM models on GPU clusters while keeping your existing training code intact. Moreover, with MoAI Platform, you can effortlessly configure the number of GPUs you need without changing any code. So please dive in and develop new models quickly and effortlessly with your data!","In case if you still have any questions regarding this tutorial feel free to ask Moreh."]},{"l":"Learn More","p":["MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)","Llama2 Fine-tuning","Mistral Fine-tuning","GPT Fine-tuning","Qwen Fine-tuning"]}],[{"l":"Supported Documents"}],[{"i":"advanced-parallelization-ap","l":"Advanced Parallelization (AP)"},{"i":"moai-platform의-자동병렬화-기능--advanced-parallelization-ap","l":"MoAI Platform의 자동병렬화 기능, Advanced Parallelization (AP)"},{"i":"병렬화가-반드시-필요한-이유는-무엇일까요","l":"병렬화가 반드시 필요한 이유는 무엇일까요?","p":["일반적으로 많이 사용되는 Llama2 13B 모델의 크기를 Bytes 단위로 계산해봅시다.","130억개의 파라미터를 가진 Llama2 13B는 FP16 데이터 형을 기준으로 13B * 2 bytes 크기입니다. 이는 약 24.2GB입니다. AdamW optimizer는 13B * 2 * 2로 약 48.4GB입니다. 모델을 로드하는 데에만 최소 72.6GB가 필요하며 Gradient에 필요한 메모리 약 24.2GB 등 모델 로드 이외에 +\\alpha 의 메모리가 필요합니다.","MoAI Platform은 가상화 된 GPU 하나를 제공하지만, 이는 실제로 여러 GPU에 모델을 복사하고 batch samples를 균등하게 분할하여 학습시키는 DDP 방식으로 기본 설정되어 동작합니다. 따라서 1 device chip의 VRAM인 64GB가 넘는 데이터를 로드할 수 없습니다.","따라서 모델을 병렬화하여 여러 GPU에 로드하는 기법이 필요합니다."]},{"i":"advanced-parallelization이란","l":"Advanced Parallelization이란?","p":["Advanced Parallelization(이하 AP)은 MoAI Platform에서 제공하는 최적화된 분산 병렬처리 기능입니다. 일반적으로 ML 엔지니어라면 모델 병렬화를 ‘최적화’하기 위해 수 많은 경험적 시행착오를 겪곤합니다. (예를 들어, 모델의 stages 개수, micro batches 개수 등) 하지만 MoAI Platform을 사용한다면 다른 프레임워크에서는 경험할 수 없는 특별한 AP 기능을 활용할 수 있어 최적화된 병렬화에 소요되는 시간과 노력을 획기적으로 줄일 수 있습니다.","Moreh의 AP 기능은 기존 최적화 과정을 자동화 함으로써, 최적의 병렬화 환경 변수 조합을 신속하게 결정합니다. 따라서 대규모 모델 훈련시 적용하는 효율적인 Pipeline Parallelism, Tensor Parallelism의 최적 매개변수와 환경 변수 조합을 간단히 얻을 수 있습니다."]}],[{"i":"advanced-parallelism-ap-기능-사용하기","l":"Advanced Parallelism (AP) 기능 사용하기","p":["기본적으로 AP는 노드 단위로 병렬화를 진행합니다. 따라서 AP를 사용하기 위해서는 multi gpu 환경이어야 합니다. 아래 가이드를 따라 AP 기능을 사용하기에 앞서 사용자가 현재 사용하는 가속기 정보를 한번 더 점검해주시기 바랍니다. 가속기 사이즈에 대한 세부 정보는 KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보 참고해주시기 바랍니다."]},{"l":"AP 기능 적용 방법","p":["AP 기능은 두가지 방식으로 적용할 수 있습니다.","코드 한줄 추가하기","실행 코드에 다음 한줄을 추가하여 AP 기능을 킬 수 있습니다. (이를 주석처리하면 끌 수 있습니다.)","환경 변수로 입력하기","다음과 같이 터미널 세션의 환경변수로 AP 기능을 킬 수 있습니다. ( 0으로 설정하면 끌 수 있습니다.)"]},{"l":"사용 예시 살펴보기","p":["-","1024","13,015,864,320","4xlarge","64","batch size","num params","Pytorch 환경 설정이 되었다면, Github 레포지토리에서 학습을 위한 코드를 가져옵니다.","quickstart 레포지토리를 클론하여 quickstart/ap-example 디렉토리를 확인해보시면 Moreh에서 미리 준비한 AP기능 test를 위한 text_summarization_for_ap.py 를 확인하실 수 있습니다. 이 코드를 기반으로 AP 기능을 적용해봅시다.","sda","sequence length","text_summarization_for_ap.py(전체코드 제공)","먼저 AP를 적용시키는 부분이 어디인지 python 프로그램에서 확인해보시죠.","사용자가 2대 이상의 노드를 사용하는 환경이 준비 되었다면 이제 AP 기능을 사용하기 위한 학습 코드를 만들어 보겠습니다. 이 가이드에서는 Llama2 모델을 활용하여 코드를 세팅합니다. 참고로, Llama2 모델은 커뮤니티 라이센스 동의와 Hugging Face 토큰 정보가 필요합니다. 1. Fine-tuning 준비하기 를 참고하여 학습 코드를 준비해주세요.","테스트를 위한 학습 구성은 다음과 같습니다. 이를 토대로 테스트를 진행하겠습니다.","학습 코드가 준비되었다면, MoAI Platform에서 학습을 실행하기 전 아래와 같이 pytorch 환경을 설정합니다. 아래 예시의 경우 PyTorch 1.13.1+cu116 버전을 실행하는 MoAI의 24.2.0 버전이 설치되어 있음을 의미합니다. 자세한 설명은 1. Fine-tuning 준비하기 튜토리얼을 참고해주시기 바랍니다."]},{"l":"AP 기능 ON","p":["프로그램의 main 함수 시작 지점에 AP 기능을 켜는 line이 있습니다. 다음과 같이 AP를 적용한 후 학습을 실행합니다.","학습이 종료되면 다음과 같은 로그를 확인할 수 있습니다.","이처럼 단 한 줄의 AP 기능 프로그램을 추가하여 복잡한 분산 병렬처리가 수행되어 학습이 진행된 것을 확인할 수 있습니다. AP 기능을 적용하여 손쉬운 병렬화가 가능했는데요, 만약 사용자가 AP 기능을 사용하지 않았을 때는 어떤 경험을 하게 될까요?"]},{"l":"AP 기능 OFF","p":["이를 확인할 수 있도록 AP를 켜지 않았을 때의 형상을 보여 드리겠습니다. 다시 python 프로그램의 main 함수 시작 지점에 AP 기능을 켜는 line을 주석처리하여 AP 기능을 끄겠습니다.","그 다음 학습을 진행합니다.","학습이 종료되면 다음과 같은 로그를 확인할 수 있습니다.","위 로그에서 RuntimeError: Error Code 4: OUT_OF_MEMORY 라는 메시지를 볼 수 있는데, 이것이 바로 앞서 말씀드린 1 device chip의 VRAM인 64GB가 넘는 데이터를 로드 할 수 없기 때문에 발생하는 OOM 에러입니다.","MoAI Platform 이 아닌 다른 프레임워크를 사용한다면 이런 불편함을 겪어야 합니다. 그러나 MoAI Platform을 사용하는 사용자라면 별도 병렬화 최적화를 위해 오랫동안 계산하며 고민하는 시간을 들이지 않고 AP 기능 한줄을 적용하여 골치아픈 OOM 문제를 해결할 수 있습니다. 정말 편리한 기능이죠?"]}],[{"l":"Prepare Fine-tuning on MoAI Platform","p":["MoAI Platform은 다양한 GPU로 구성될 수 있지만, 동일한 인터페이스(CLI)를 통해 사용자에게 일관된 경험을 제공합니다. 모든 사용자가 같은 방식으로 시스템에 접근하여 플랫폼을 사용할 수 있기 때문에 보다 효율적이며 직관적입니다.","MoAI Platform 또한 일반적인 AI 학습 환경과 유사하게 Python 기반의 프로그래밍을 지원합니다. 이에 따라 본 문서에서는 AI 학습을 위한 표준 환경 구성으로서 conda 가상 환경의 설정과 사용 방법을 중심으로 설명합니다."]},{"l":"conda 환경 설정하기","p":["훈련을 시작하기 위해 먼저 conda 환경을 생성합니다.","my-env 에는 사용자가 사용할 환경 이름을 입력합니다.","conda 환경을 활성화합니다.","Fine-tuning에 필요한 library와 package를 설치합니다.","moreh-smi 명령어를 입력해 설치된 Moreh 솔루션의 버전과 사용중인 MoAI Accelerator 정보를 확인할 수 있습니다. 현재 사용중인 MoAI Accelerator는 4xLarge.2048GB 입니다. MoAI Accelerator에 대한 자세한 정보는 MoAI Accelerator 사양을 참고해주세요."]},{"i":"moai-accelerator-선택-변경하기","l":"MoAI Accelerator 선택, 변경하기","p":["sLLM 파인튜닝시 학습 데이터 배치 사이즈에 따른 적절한 MoAI Accelerator 모델을 moreh toolkit을 사용하여 선택, 변경할 수 있습니다. 참고로, sLLM(약 7B~ 13B 모델)을 fine-tuning 하기 위해 일반적으로 사용되는 데이터셋의 크기는 약 40GB의 텍스트 데이터셋입니다.","먼저, moreh-smi 를 사용하여 현재 사용하고 있는 MoAI Accelerator 모델을 확인해 보겠습니다.","현재 사용하고 있는 MoAI Accelerator 모델에서 제공되는 메모리는 64GB입니다. moreh-switch-model 을 사용하여 더 큰 메모리를 제공하는 MoAI Accelerator 모델로 변경해 보겠습니다.","4xLarge.2048GB 모델로 변경하기 위해 8 을 입력합니다.","q 를 입력하여 변경을 완료합니다.","다시 moreh-smi 를 사용하여 변경된 상태를 확인하면 사용하고 있는 MoAI Accelerator 모델이 4xLarge.2048GB 모델로 변경된 것을 확인할 수 있습니다.","각 모델별로 MoAI Platform에서 권장하는 Fine-tuning 시 최적의 파라미터는 LLM Fine-tuning 파라미터 가이드 를 참고하시기 바랍니다.","moreh-smi, moreh-switch-model 를 비롯한 moreh toolkit의 구체적인 사용 방법에 대해서는 MoAI Platform의 toolkit 사용하기 를 참고하시기 바랍니다."]}],[{"i":"kt-hyperscale-ai-computing-hac-서비스-가속기-모델-정보","l":"KT Hyperscale AI Computing (HAC) 서비스 가속기 모델 정보","p":["…","12xLarge.6144GB","12대","1대","24xLarge.12288GB","24대","2xLarge.1024GB","2대","3xLarge.1536GB","3대","48xLarge.24576GB","48대","4xLarge.2048GB","4대","6xLarge.3072GB","6대","8xLarge.4096GB","8대","https://manual.cloud.kt.com/kt/hyperscale-ai-computing-howtouse-cj","KT Cloud 공식 매뉴얼 바로가기","Large.256GB","Medium.128GB","MI250 0.5개","MI250 12개","MI250 16개","MI250 192개","MI250 1개","MI250 24개","MI250 2개","MI250 32개","MI250 48개","MI250 4개","MI250 8개","MI250 96개","Model","Small.64GB","xLarge.512GB","노드 수","실제 물리 GPU","현재 HAC 서비스는 AMD MI250 GPU를 사용해 구동되고 있습니다. 모델/애플리케이션에 따라 성능이 달라질 수 있지만 기본적으로 AMD MI250 하나와 NVIDIA A100 하나에서 동등한 성능이 나온다고 예상하시면 됩니다."]}],[{"l":"LLM Fine-tuning parameter guide","p":["1,122,745 MiB","1,138,546 MiB","1,403,047 MiB","1,651,008 MiB","1,680,233 MiB","1,706,797 MiB","1,764,955 MiB","1,767,888 MiB","1,800,656 MiB","1024","109872","11,562","11m","121,013","125,180","128","1292886 MiB","12m","13286","1360m","13m","1403,2189","144,124","1467646 MiB","1489,3","15,890","15,972","154,12123","157,859","16","1600235 MiB","163,839","172395","17m","186,353","191605","194,282","2,146,115 MiB","2,645,347 MiB","2,800,000 MiB","2,845,656 MiB","2048","20m","22m","238,212","24,156","24.2.0","24.3.0","24.5.0","24m","256","25m","26,111","27B","28m","2xlarge","3,460,240 MiB","3013826 MiB","30m","3143781 MiB","3181616 MiB","32","32,371","32,563","34m","35m","36m","376,493","38m","400m","4096","40m","442,982 MiB","47,679","480m","4xlarge","50,782","51,353","512","543816 MiB","56,385","560,835 MiB","560m","58531","586m","59m","62,481","62,582","62,740","626,391 MiB","62m","63,893","638,460 MiB","64","65,565","6841","69,840","720m","749065 MiB","784,485 MiB","790,572 MiB","790454 MiB","7m","8,934","81m","843,375 MiB","858,128 MiB","866,656 MiB","872m","8m","8xlarge","92,623","93,165","962m","99,873","9m","Advanced Parallelism 적용 유무","Baichuan2 13B","batch size","Cerebras GPT 13B","Llama2 13B","Mistral 7B","MoAI Accelerator","MoAI Accelerator 에 명시된 명칭은 사용자가 이용하는 CSP에 따라 다를 수 있습니다.","MoAI Platform version","Qwen1.5 7B","sequence length","throughput","token 갯수","True","vram 사용량","모델명","이 가이드는 MoAI Platform에서 제공하는 최적의 파라미터이며 사용자 학습시 참고 정보로만 사용해주시기 바랍니다.","학습 시간"]}],[{"i":"가상화virtualization에-대해서","l":"가상화(Virtualization)에 대해서","p":["유저는 MoAI Platform의 가상화 기능을 통해 수백 개의 GPU를 마치 하나의 단일한 가속기를 다루는 것과 같이 사용할 수 있습니다. 유저는 이를 통하여 수백 대의 GPU에 해당하는 자원과 계산 리소스를 사용함과 동시에 복잡한 GPU 클러스터 관리의 부담을 줄일 수 있습니다.","먼저, 널리 사용되는 NVIDIA GPU 환경과의 비교를 통해 MoAI Platform에서 가상화된 가속기를 어떻게 확인할 수 있는지 알아보겠습니다. NVIDIA GPU 환경에서 nvidia-smi 를 사용하였을 경우 우리는 다음과 같은 화면을 통해 현재 사용 가능한 NVIDA GPU의 정보를 확인할 수 있습니다.","이 예시와 같이 nvidia-smi 를 통해 보여지는 각각의 GPU 정보는 현재 유저가 사용할 수 있는 물리적인 GPU 장비의 정보를 의미합니다.","MoAI Platform에서 moreh-smi 를 사용하면 마찬가지로 유저가 현재 사용할 수 있는 가속기의 정보를 확인할 수 있습니다.","moreh-smi 의 결과에서 유저는 마치 4096GB의 메모리를 갖는 단일한 가속기를 사용하는 것 처럼 보입니다. 차이점이 있다면, 이는 사실 수십~ 수백개의 물리적인 GPU로 이루어진 GPU 클러스터가 하나의 가속기로 가상화된 결과라는 것입니다.","MoAI Platform상에서 PyTorch나 Tensorflow와 같은 딥러닝 프레임워크를 사용할 때에도 마찬가지로 유저는 하나의 단일한 가속기를 사용하는 것으로 간주됩니다. 유저는 Pytorch의 cuda() 와 같은 API를 그대로 사용하여 가상화된 가속기를 사용할 수 있습니다.","위와 같이 pytorch에서 기존 cuda API를 그대로 사용하여 현재 사용 가능한 가속기 갯수를 확인하였을 경우, 1이라는 결과가 나오는 것을 확인할 수 있습니다.","moreh_virtual_device.gif","여기서 알아두셔야 할 것은, 실제 유저가 사용하는 노드(front node)에는 물리적인 GPU가 없다는 사실입니다. 유저가 PyTorch와 같은 딥러닝 프레임워크에서 .cuda() 와 같은 API를 통해 GPU 가속기를 사용하고자 하면 MoAI Platform은 유저가 사용할 수 있는 GPU 클러스터를 front node가 사용할 수 있도록 자동으로 할당합니다. 유저가 딥러닝 프레임워크를 사용하여 모델 학습 및 추론 작업을 수행할 시 MoAI Platform에서는 할당된 GPU 클러스터를 단일한 가속기로 간주하여 사용할 수 있도록 병렬화와 같은 기법을 자동으로 적용합니다."]}]]